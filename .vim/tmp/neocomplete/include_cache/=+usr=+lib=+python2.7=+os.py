[{'word': 'SEEK_CUR', 'menu': '[I]', 'kind': 'v', 'abbr': 'SEEK_CUR'}, {'word': 'SEEK_END', 'menu': '[I]', 'kind': 'v', 'abbr': 'SEEK_END'}, {'word': 'SEEK_SET', 'menu': '[I]', 'kind': 'v', 'abbr': 'SEEK_SET'}, {'word': '_Environ', 'menu': '[I]', 'kind': 'c', 'abbr': '_Environ(UserDict.IterableUserDict): <class>'}, {'word': '__all__', 'menu': '[I]', 'kind': 'v', 'abbr': '__all__ = ["altsep", "curdir", "pardir", "sep", "extsep", "pathsep", "linesep",'}, {'word': '__init__', 'menu': '._Environ', 'kind': 'm', 'abbr': 'def __init__(self, environ):'}, {'word': '_execvpe', 'menu': '[I]', 'kind': 'f', 'abbr': 'def _execvpe(file, args, env=None):'}, {'word': '_exists', 'menu': '[I]', 'kind': 'f', 'abbr': 'def _exists(name):'}, {'word': '_get_exports_list', 'menu': '[I]', 'kind': 'f', 'abbr': 'def _get_exports_list(module):'}, {'word': '_make_stat_result', 'menu': '[I]', 'kind': 'f', 'abbr': 'def _make_stat_result(tup, dict):'}, {'word': '_make_statvfs_result', 'menu': '[I]', 'kind': 'f', 'abbr': 'def _make_statvfs_result(tup, dict):'}, {'word': '_names', 'menu': '[I]', 'kind': 'v', 'abbr': '_names = sys.builtin_module_names'}, {'word': '_pickle_stat_result', 'menu': '[I]', 'kind': 'f', 'abbr': 'def _pickle_stat_result(sr):'}, {'word': '_pickle_statvfs_result', 'menu': '[I]', 'kind': 'f', 'abbr': 'def _pickle_statvfs_result(sr):'}, {'word': '_spawnvef', 'menu': '[I]', 'kind': 'f', 'abbr': 'def _spawnvef(mode, file, args, env, func):'}, {'word': 'clear', 'menu': '[I]', 'kind': 'f', 'abbr': 'def clear(self):'}, {'word': 'copy', 'menu': '._Environ', 'kind': 'm', 'abbr': 'def copy(self):'}, {'word': 'environ', 'menu': '[I]', 'kind': 'v', 'abbr': 'environ = _Environ(environ)'}, {'word': 'execl', 'menu': '[I]', 'kind': 'f', 'abbr': 'def execl(file, *args):'}, {'word': 'execle', 'menu': '[I]', 'kind': 'f', 'abbr': 'def execle(file, *args):'}, {'word': 'execlp', 'menu': '[I]', 'kind': 'f', 'abbr': 'def execlp(file, *args):'}, {'word': 'execlpe', 'menu': '[I]', 'kind': 'f', 'abbr': 'def execlpe(file, *args):'}, {'word': 'execvp', 'menu': '[I]', 'kind': 'f', 'abbr': 'def execvp(file, args):'}, {'word': 'execvpe', 'menu': '[I]', 'kind': 'f', 'abbr': 'def execvpe(file, args, env):'}, {'word': 'get', 'menu': '._Environ', 'kind': 'm', 'abbr': 'def get(self, key, failobj=None):'}, {'word': 'getenv', 'menu': '[I]', 'kind': 'f', 'abbr': 'def getenv(key, default=None):'}, {'word': 'has_key', 'menu': '._Environ', 'kind': 'm', 'abbr': 'def has_key(self, key):'}, {'word': 'linesep', 'menu': '[I]', 'kind': 'v', 'abbr': 'linesep = ''\n'''}, {'word': 'makedirs', 'menu': '[I]', 'kind': 'f', 'abbr': 'makedirs'}, {'word': 'name', 'menu': '[I]', 'kind': 'v', 'abbr': 'name = ''ce'''}, {'word': 'pop', 'menu': '[I]', 'kind': 'f', 'abbr': 'def pop(self, key, *args):'}, {'word': 'popen2', 'menu': '[I]', 'kind': 'f', 'abbr': 'popen2'}, {'word': 'popen3', 'menu': '[I]', 'kind': 'f', 'abbr': 'popen3'}, {'word': 'popen4', 'menu': '[I]', 'kind': 'f', 'abbr': 'popen4'}, {'word': 'removedirs', 'menu': '[I]', 'kind': 'f', 'abbr': 'def removedirs(name):'}, {'word': 'renames', 'menu': '[I]', 'kind': 'f', 'abbr': 'def renames(old, new):'}, {'word': 'spawnl', 'menu': '[I]', 'kind': 'f', 'abbr': 'def spawnl(mode, file, *args):'}, {'word': 'spawnle', 'menu': '[I]', 'kind': 'f', 'abbr': 'def spawnle(mode, file, *args):'}, {'word': 'spawnlp', 'menu': '[I]', 'kind': 'f', 'abbr': 'def spawnlp(mode, file, *args):'}, {'word': 'spawnlpe', 'menu': '[I]', 'kind': 'f', 'abbr': 'def spawnlpe(mode, file, *args):'}, {'word': 'spawnv', 'menu': '[I]', 'kind': 'f', 'abbr': 'def spawnv(mode, file, args):'}, {'word': 'spawnve', 'menu': '[I]', 'kind': 'f', 'abbr': 'def spawnve(mode, file, args, env):'}, {'word': 'spawnvp', 'menu': '[I]', 'kind': 'f', 'abbr': 'def spawnvp(mode, file, args):'}, {'word': 'spawnvpe', 'menu': '[I]', 'kind': 'f', 'abbr': 'def spawnvpe(mode, file, args, env):'}, {'word': 'unsetenv', 'menu': '[I]', 'kind': 'f', 'abbr': 'def unsetenv(key):'}, {'word': 'update', 'menu': '._Environ', 'kind': 'm', 'abbr': 'def update(self, dict=None, **kwargs):'}, {'word': 'walk', 'menu': '[I]', 'kind': 'f', 'abbr': 'def walk(top, topdown=True, onerror=None, followlinks=False):'}]
