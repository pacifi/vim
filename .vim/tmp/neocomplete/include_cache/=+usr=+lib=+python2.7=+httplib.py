[{'word': 'ACCEPTED', 'menu': '[I]', 'kind': 'v', 'abbr': 'ACCEPTED'}, {'word': 'BAD_GATEWAY', 'menu': '[I]', 'kind': 'v', 'abbr': 'BAD_GATEWAY'}, {'word': 'BAD_REQUEST', 'menu': '[I]', 'kind': 'v', 'abbr': 'BAD_REQUEST'}, {'word': 'BadStatusLine', 'menu': '[I]', 'kind': 'c', 'abbr': 'BadStatusLine(HTTPException): <class>'}, {'word': 'CONFLICT', 'menu': '[I]', 'kind': 'v', 'abbr': 'CONFLICT'}, {'word': 'CONTINUE', 'menu': '[I]', 'kind': 'v', 'abbr': 'CONTINUE'}, {'word': 'CREATED', 'menu': '[I]', 'kind': 'v', 'abbr': 'CREATED'}, {'word': 'CannotSendHeader', 'menu': '[I]', 'kind': 'c', 'abbr': 'CannotSendHeader(ImproperConnectionState): <class>'}, {'word': 'CannotSendRequest', 'menu': '[I]', 'kind': 'c', 'abbr': 'CannotSendRequest(ImproperConnectionState): <class>'}, {'word': 'EXPECTATION_FAILED', 'menu': '[I]', 'kind': 'v', 'abbr': 'EXPECTATION_FAILED'}, {'word': 'FAILED_DEPENDENCY', 'menu': '[I]', 'kind': 'v', 'abbr': 'FAILED_DEPENDENCY'}, {'word': 'FORBIDDEN', 'menu': '[I]', 'kind': 'v', 'abbr': 'FORBIDDEN'}, {'word': 'FOUND', 'menu': '[I]', 'kind': 'v', 'abbr': 'FOUND'}, {'word': 'FakeSocket', 'menu': '[I]', 'kind': 'f', 'abbr': 'def FakeSocket (sock, sslobj):'}, {'word': 'GATEWAY_TIMEOUT', 'menu': '[I]', 'kind': 'v', 'abbr': 'GATEWAY_TIMEOUT'}, {'word': 'GONE', 'menu': '[I]', 'kind': 'v', 'abbr': 'GONE'}, {'word': 'HTTP', 'menu': '[I]', 'kind': 'c', 'abbr': 'HTTP: <class>'}, {'word': 'HTTPConnection', 'menu': '[I]', 'kind': 'c', 'abbr': 'HTTPConnection: <class>'}, {'word': 'HTTPException', 'menu': '[I]', 'kind': 'c', 'abbr': 'HTTPException(Exception): <class>'}, {'word': 'HTTPMessage', 'menu': '[I]', 'kind': 'c', 'abbr': 'HTTPMessage(mimetools.Message): <class>'}, {'word': 'HTTPResponse', 'menu': '[I]', 'kind': 'c', 'abbr': 'HTTPResponse: <class>'}, {'word': 'HTTPS', 'menu': '[I]', 'kind': 'c', 'abbr': 'HTTPS(HTTP): <class>'}, {'word': 'HTTPSConnection', 'menu': '[I]', 'kind': 'c', 'abbr': 'HTTPSConnection(HTTPConnection): <class>'}, {'word': 'HTTPS_PORT', 'menu': '[I]', 'kind': 'v', 'abbr': 'HTTPS_PORT'}, {'word': 'HTTP_PORT', 'menu': '[I]', 'kind': 'v', 'abbr': 'HTTP_PORT'}, {'word': 'HTTP_VERSION_NOT_SUPPORTED', 'menu': '[I]', 'kind': 'v', 'abbr': 'HTTP_VERSION_NOT_SUPPORTED'}, {'word': 'IM_USED', 'menu': '[I]', 'kind': 'v', 'abbr': 'IM_USED'}, {'word': 'INSUFFICIENT_STORAGE', 'menu': '[I]', 'kind': 'v', 'abbr': 'INSUFFICIENT_STORAGE'}, {'word': 'INTERNAL_SERVER_ERROR', 'menu': '[I]', 'kind': 'v', 'abbr': 'INTERNAL_SERVER_ERROR'}, {'word': 'ImproperConnectionState', 'menu': '[I]', 'kind': 'c', 'abbr': 'ImproperConnectionState(HTTPException): <class>'}, {'word': 'IncompleteRead', 'menu': '[I]', 'kind': 'c', 'abbr': 'IncompleteRead(HTTPException): <class>'}, {'word': 'InvalidURL', 'menu': '[I]', 'kind': 'c', 'abbr': 'InvalidURL(HTTPException): <class>'}, {'word': 'LENGTH_REQUIRED', 'menu': '[I]', 'kind': 'v', 'abbr': 'LENGTH_REQUIRED'}, {'word': 'LOCKED', 'menu': '[I]', 'kind': 'v', 'abbr': 'LOCKED'}, {'word': 'LineAndFileWrapper', 'menu': '[I]', 'kind': 'c', 'abbr': 'LineAndFileWrapper: <class>'}, {'word': 'LineTooLong', 'menu': '[I]', 'kind': 'c', 'abbr': 'LineTooLong(HTTPException): <class>'}, {'word': 'MAXAMOUNT', 'menu': '[I]', 'kind': 'v', 'abbr': 'MAXAMOUNT'}, {'word': 'METHOD_NOT_ALLOWED', 'menu': '[I]', 'kind': 'v', 'abbr': 'METHOD_NOT_ALLOWED'}, {'word': 'MOVED_PERMANENTLY', 'menu': '[I]', 'kind': 'v', 'abbr': 'MOVED_PERMANENTLY'}, {'word': 'MULTIPLE_CHOICES', 'menu': '[I]', 'kind': 'v', 'abbr': 'MULTIPLE_CHOICES'}, {'word': 'MULTI_STATUS', 'menu': '[I]', 'kind': 'v', 'abbr': 'MULTI_STATUS'}, {'word': 'NON_AUTHORITATIVE_INFORMATION', 'menu': '[I]', 'kind': 'v', 'abbr': 'NON_AUTHORITATIVE_INFORMATION'}, {'word': 'NOT_ACCEPTABLE', 'menu': '[I]', 'kind': 'v', 'abbr': 'NOT_ACCEPTABLE'}, {'word': 'NOT_EXTENDED', 'menu': '[I]', 'kind': 'v', 'abbr': 'NOT_EXTENDED'}, {'word': 'NOT_FOUND', 'menu': '[I]', 'kind': 'v', 'abbr': 'NOT_FOUND'}, {'word': 'NOT_IMPLEMENTED', 'menu': '[I]', 'kind': 'v', 'abbr': 'NOT_IMPLEMENTED'}, {'word': 'NOT_MODIFIED', 'menu': '[I]', 'kind': 'v', 'abbr': 'NOT_MODIFIED'}, {'word': 'NO_CONTENT', 'menu': '[I]', 'kind': 'v', 'abbr': 'NO_CONTENT'}, {'word': 'NotConnected', 'menu': '[I]', 'kind': 'c', 'abbr': 'NotConnected(HTTPException): <class>'}, {'word': 'OK', 'menu': '[I]', 'kind': 'v', 'abbr': 'OK'}, {'word': 'PARTIAL_CONTENT', 'menu': '[I]', 'kind': 'v', 'abbr': 'PARTIAL_CONTENT'}, {'word': 'PAYMENT_REQUIRED', 'menu': '[I]', 'kind': 'v', 'abbr': 'PAYMENT_REQUIRED'}, {'word': 'PRECONDITION_FAILED', 'menu': '[I]', 'kind': 'v', 'abbr': 'PRECONDITION_FAILED'}, {'word': 'PROCESSING', 'menu': '[I]', 'kind': 'v', 'abbr': 'PROCESSING'}, {'word': 'PROXY_AUTHENTICATION_REQUIRED', 'menu': '[I]', 'kind': 'v', 'abbr': 'PROXY_AUTHENTICATION_REQUIRED'}, {'word': 'REQUESTED_RANGE_NOT_SATISFIABLE', 'menu': '[I]', 'kind': 'v', 'abbr': 'REQUESTED_RANGE_NOT_SATISFIABLE'}, {'word': 'REQUEST_ENTITY_TOO_LARGE', 'menu': '[I]', 'kind': 'v', 'abbr': 'REQUEST_ENTITY_TOO_LARGE'}, {'word': 'REQUEST_TIMEOUT', 'menu': '[I]', 'kind': 'v', 'abbr': 'REQUEST_TIMEOUT'}, {'word': 'REQUEST_URI_TOO_LONG', 'menu': '[I]', 'kind': 'v', 'abbr': 'REQUEST_URI_TOO_LONG'}, {'word': 'RESET_CONTENT', 'menu': '[I]', 'kind': 'v', 'abbr': 'RESET_CONTENT'}, {'word': 'ResponseNotReady', 'menu': '[I]', 'kind': 'c', 'abbr': 'ResponseNotReady(ImproperConnectionState): <class>'}, {'word': 'SEE_OTHER', 'menu': '[I]', 'kind': 'v', 'abbr': 'SEE_OTHER'}, {'word': 'SERVICE_UNAVAILABLE', 'menu': '[I]', 'kind': 'v', 'abbr': 'SERVICE_UNAVAILABLE'}, {'word': 'SWITCHING_PROTOCOLS', 'menu': '[I]', 'kind': 'v', 'abbr': 'SWITCHING_PROTOCOLS'}, {'word': 'TEMPORARY_REDIRECT', 'menu': '[I]', 'kind': 'v', 'abbr': 'TEMPORARY_REDIRECT'}, {'word': 'UNAUTHORIZED', 'menu': '[I]', 'kind': 'v', 'abbr': 'UNAUTHORIZED'}, {'word': 'UNPROCESSABLE_ENTITY', 'menu': '[I]', 'kind': 'v', 'abbr': 'UNPROCESSABLE_ENTITY'}, {'word': 'UNSUPPORTED_MEDIA_TYPE', 'menu': '[I]', 'kind': 'v', 'abbr': 'UNSUPPORTED_MEDIA_TYPE'}, {'word': 'UPGRADE_REQUIRED', 'menu': '[I]', 'kind': 'v', 'abbr': 'UPGRADE_REQUIRED'}, {'word': 'USE_PROXY', 'menu': '[I]', 'kind': 'v', 'abbr': 'USE_PROXY'}, {'word': 'UnimplementedFileMode', 'menu': '[I]', 'kind': 'c', 'abbr': 'UnimplementedFileMode(HTTPException): <class>'}, {'word': 'UnknownProtocol', 'menu': '[I]', 'kind': 'c', 'abbr': 'UnknownProtocol(HTTPException): <class>'}, {'word': 'UnknownTransferEncoding', 'menu': '[I]', 'kind': 'c', 'abbr': 'UnknownTransferEncoding(HTTPException): <class>'}, {'word': '_CS_IDLE', 'menu': '[I]', 'kind': 'v', 'abbr': '_CS_IDLE = ''Idle'''}, {'word': '_CS_REQ_SENT', 'menu': '[I]', 'kind': 'v', 'abbr': '_CS_REQ_SENT = ''Request-sent'''}, {'word': '_CS_REQ_STARTED', 'menu': '[I]', 'kind': 'v', 'abbr': '_CS_REQ_STARTED = ''Request-started'''}, {'word': '_MAXLINE', 'menu': '[I]', 'kind': 'v', 'abbr': '_MAXLINE'}, {'word': '_UNKNOWN', 'menu': '[I]', 'kind': 'v', 'abbr': '_UNKNOWN = ''UNKNOWN'''}, {'word': '__all__', 'menu': '[I]', 'kind': 'v', 'abbr': '__all__ = ["HTTP", "HTTPResponse", "HTTPConnection",'}, {'word': '__init__', 'menu': '.HTTPSConnection', 'kind': 'm', 'abbr': 'def __init__(self, host, port=None, key_file=None, cert_file=None,'}, {'word': '_check_close', 'menu': 'HTTPResponse', 'kind': 'm', 'abbr': 'def _check_close(self):'}, {'word': '_connection_class', 'menu': '.HTTPS', 'kind': 'v', 'abbr': '_connection_class = HTTPSConnection'}, {'word': '_done', 'menu': 'LineAndFileWrapper', 'kind': 'm', 'abbr': 'def _done(self):'}, {'word': '_http_vsn', 'menu': 'HTTP', 'kind': 'v', 'abbr': '_http_vsn'}, {'word': '_http_vsn_str', 'menu': 'HTTP', 'kind': 'v', 'abbr': '_http_vsn_str'}, {'word': '_output', 'menu': 'HTTPConnection', 'kind': 'm', 'abbr': 'def _output(self, s):'}, {'word': '_read_chunked', 'menu': 'HTTPResponse', 'kind': 'm', 'abbr': 'def _read_chunked(self, amt):'}, {'word': '_read_status', 'menu': 'HTTPResponse', 'kind': 'm', 'abbr': 'def _read_status(self):'}, {'word': '_safe_read', 'menu': 'HTTPResponse', 'kind': 'm', 'abbr': 'def _safe_read(self, amt):'}, {'word': '_send_output', 'menu': 'HTTPConnection', 'kind': 'm', 'abbr': 'def _send_output(self, message_body=None):'}, {'word': '_send_request', 'menu': 'HTTPConnection', 'kind': 'm', 'abbr': 'def _send_request(self, method, url, body, headers):'}, {'word': '_set_content_length', 'menu': 'HTTPConnection', 'kind': 'm', 'abbr': 'def _set_content_length(self, body):'}, {'word': '_set_hostport', 'menu': 'HTTPConnection', 'kind': 'm', 'abbr': 'def _set_hostport(self, host, port):'}, {'word': '_setup', 'menu': 'HTTP', 'kind': 'm', 'abbr': 'def _setup(self, conn):'}, {'word': '_tunnel', 'menu': 'HTTPConnection', 'kind': 'm', 'abbr': 'def _tunnel(self):'}, {'word': 'addcontinue', 'menu': 'HTTPMessage', 'kind': 'm', 'abbr': 'def addcontinue(self, key, more):'}, {'word': 'addheader', 'menu': 'HTTPMessage', 'kind': 'm', 'abbr': 'def addheader(self, key, value):'}, {'word': 'auto_open', 'menu': 'HTTPConnection', 'kind': 'v', 'abbr': 'auto_open'}, {'word': 'begin', 'menu': 'HTTPResponse', 'kind': 'm', 'abbr': 'def begin(self):'}, {'word': 'close', 'menu': 'HTTP', 'kind': 'm', 'abbr': 'def close(self):'}, {'word': 'connect', 'menu': '.HTTPSConnection', 'kind': 'm', 'abbr': 'def connect(self):'}, {'word': 'debuglevel', 'menu': 'HTTP', 'kind': 'v', 'abbr': 'debuglevel'}, {'word': 'default_port', 'menu': '.HTTPSConnection', 'kind': 'v', 'abbr': 'default_port = HTTPS_PORT'}, {'word': 'endheaders', 'menu': 'HTTPConnection', 'kind': 'm', 'abbr': 'def endheaders(self, message_body=None):'}, {'word': 'error', 'menu': '[I]', 'kind': 'v', 'abbr': 'error = HTTPException'}, {'word': 'fileno', 'menu': 'HTTPResponse', 'kind': 'm', 'abbr': 'def fileno(self):'}, {'word': 'getfile', 'menu': 'HTTP', 'kind': 'm', 'abbr': 'def getfile(self):'}, {'word': 'getheader', 'menu': 'HTTPResponse', 'kind': 'm', 'abbr': 'def getheader(self, name, default=None):'}, {'word': 'getheaders', 'menu': 'HTTPResponse', 'kind': 'm', 'abbr': 'def getheaders(self):'}, {'word': 'getreply', 'menu': 'HTTP', 'kind': 'm', 'abbr': 'def getreply(self, buffering=False):'}, {'word': 'getresponse', 'menu': 'HTTPConnection', 'kind': 'm', 'abbr': 'def getresponse(self, buffering=False):'}, {'word': 'isclosed', 'menu': 'HTTPResponse', 'kind': 'm', 'abbr': 'def isclosed(self):'}, {'word': 'putheader', 'menu': 'HTTPConnection', 'kind': 'm', 'abbr': 'def putheader(self, header, *values):'}, {'word': 'putrequest', 'menu': 'HTTPConnection', 'kind': 'm', 'abbr': 'putrequest'}, {'word': 'read', 'menu': 'HTTPResponse', 'kind': 'm', 'abbr': 'def read(self, amt=None):'}, {'word': 'readheaders', 'menu': 'HTTPMessage', 'kind': 'm', 'abbr': 'def readheaders(self):'}, {'word': 'readline', 'menu': 'LineAndFileWrapper', 'kind': 'm', 'abbr': 'def readline(self):'}, {'word': 'readlines', 'menu': 'LineAndFileWrapper', 'kind': 'm', 'abbr': 'def readlines(self, size=None):'}, {'word': 'request', 'menu': 'HTTPConnection', 'kind': 'm', 'abbr': 'def request(self, method, url, body=None, headers={}):'}, {'word': 'response_class', 'menu': 'HTTPConnection', 'kind': 'v', 'abbr': 'response_class = HTTPResponse'}, {'word': 'responses', 'menu': '[I]', 'kind': 'v', 'abbr': 'responses = {'}, {'word': 'send', 'menu': 'HTTPConnection', 'kind': 'm', 'abbr': 'def send(self, data):'}, {'word': 'set_debuglevel', 'menu': 'HTTPConnection', 'kind': 'm', 'abbr': 'def set_debuglevel(self, level):'}, {'word': 'set_tunnel', 'menu': 'HTTPConnection', 'kind': 'm', 'abbr': 'def set_tunnel(self, host, port=None, headers=None):'}, {'word': 'strict', 'menu': 'HTTPConnection', 'kind': 'v', 'abbr': 'strict'}]
