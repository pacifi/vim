[{'word': 'AbstractBaseUser', 'menu': '[I]', 'kind': 'c', 'abbr': 'AbstractBaseUser(models.Model): <class>'}, {'word': 'AbstractUser', 'menu': '[I]', 'kind': 'c', 'abbr': 'AbstractUser(AbstractBaseUser, PermissionsMixin): <class>'}, {'word': 'AnonymousUser', 'menu': '[I]', 'kind': 'c', 'abbr': 'AnonymousUser(object): <class>'}, {'word': 'BaseUserManager', 'menu': '[I]', 'kind': 'c', 'abbr': 'BaseUserManager(models.Manager): <class>'}, {'word': 'Group', 'menu': '[I]', 'kind': 'c', 'abbr': 'Group(models.Model): <class>'}, {'word': 'GroupManager', 'menu': '[I]', 'kind': 'c', 'abbr': 'GroupManager(models.Manager): <class>'}, {'word': 'Meta', 'menu': 'User', 'kind': 'c', 'abbr': 'Meta(AbstractUser.Meta): <class>'}, {'word': 'Permission', 'menu': '[I]', 'kind': 'c', 'abbr': 'Permission(models.Model): <class>'}, {'word': 'PermissionManager', 'menu': '[I]', 'kind': 'c', 'abbr': 'PermissionManager(models.Manager): <class>'}, {'word': 'PermissionsMixin', 'menu': '[I]', 'kind': 'c', 'abbr': 'PermissionsMixin(models.Model): <class>'}, {'word': 'REQUIRED_FIELDS', 'menu': 'AbstractUser', 'kind': 'v', 'abbr': 'REQUIRED_FIELDS = [''email'']'}, {'word': 'SiteProfileNotAvailable', 'menu': '[I]', 'kind': 'c', 'abbr': 'SiteProfileNotAvailable(Exception): <class>'}, {'word': 'USERNAME_FIELD', 'menu': 'AbstractUser', 'kind': 'v', 'abbr': 'USERNAME_FIELD = ''username'''}, {'word': 'User', 'menu': '[I]', 'kind': 'c', 'abbr': 'User(AbstractUser): <class>'}, {'word': 'UserManager', 'menu': '[I]', 'kind': 'c', 'abbr': 'UserManager(BaseUserManager): <class>'}, {'word': '__init__', 'menu': 'AnonymousUser', 'kind': 'm', 'abbr': 'def __init__(self):'}, {'word': '_create_user', 'menu': 'UserManager', 'kind': 'm', 'abbr': 'def _create_user(self, username, email, password,'}, {'word': '_get_groups', 'menu': 'AnonymousUser', 'kind': 'm', 'abbr': 'def _get_groups(self):'}, {'word': '_get_user_permissions', 'menu': 'AnonymousUser', 'kind': 'm', 'abbr': 'def _get_user_permissions(self):'}, {'word': '_groups', 'menu': 'AnonymousUser', 'kind': 'v', 'abbr': '_groups = EmptyManager(Group)'}, {'word': '_user_get_all_permissions', 'menu': '[I]', 'kind': 'f', 'abbr': 'def _user_get_all_permissions(user, obj):'}, {'word': '_user_has_module_perms', 'menu': '[I]', 'kind': 'f', 'abbr': 'def _user_has_module_perms(user, app_label):'}, {'word': '_user_has_perm', 'menu': '[I]', 'kind': 'f', 'abbr': 'def _user_has_perm(user, perm, obj):'}, {'word': '_user_permissions', 'menu': 'AnonymousUser', 'kind': 'v', 'abbr': '_user_permissions = EmptyManager(Permission)'}, {'word': 'abstract', 'menu': 'AbstractBaseUser.Meta', 'kind': 'v', 'abbr': 'abstract = True'}, {'word': 'check_password', 'menu': 'AbstractBaseUser', 'kind': 'm', 'abbr': 'def check_password(self, raw_password):'}, {'word': 'codename', 'menu': 'Permission', 'kind': 'v', 'abbr': 'codename'}, {'word': 'content_type', 'menu': 'Permission', 'kind': 'v', 'abbr': 'content_type = models.ForeignKey(ContentType)'}, {'word': 'create_superuser', 'menu': 'UserManager', 'kind': 'm', 'abbr': 'def create_superuser(self, username, email, password, **extra_fields):'}, {'word': 'create_user', 'menu': 'UserManager', 'kind': 'm', 'abbr': 'def create_user(self, username, email=None, password=None, **extra_fields):'}, {'word': 'date_joined', 'menu': 'AbstractUser', 'kind': 'v', 'abbr': 'date_joined = models.DateTimeField(_(''date joined''), default=timezone.now)'}, {'word': 'delete', 'menu': 'AnonymousUser', 'kind': 'm', 'abbr': 'def delete(self):'}, {'word': 'email', 'menu': 'AbstractUser', 'kind': 'v', 'abbr': 'email = models.EmailField(_(''email address''), blank=True)'}, {'word': 'email_user', 'menu': 'AbstractUser', 'kind': 'm', 'abbr': 'def email_user(self, subject, message, from_email=None):'}, {'word': 'first_name', 'menu': 'AbstractUser', 'kind': 'v', 'abbr': 'first_name'}, {'word': 'get_absolute_url', 'menu': 'AbstractUser', 'kind': 'm', 'abbr': 'def get_absolute_url(self):'}, {'word': 'get_all_permissions', 'menu': 'AnonymousUser', 'kind': 'm', 'abbr': 'def get_all_permissions(self, obj=None):'}, {'word': 'get_by_natural_key', 'menu': 'PermissionManager', 'kind': 'm', 'abbr': 'def get_by_natural_key(self, codename, app_label, model):'}, {'word': 'get_full_name', 'menu': 'AbstractBaseUser', 'kind': 'm', 'abbr': 'def get_full_name(self):'}, {'word': 'get_group_permissions', 'menu': 'AnonymousUser', 'kind': 'm', 'abbr': 'def get_group_permissions(self, obj=None):'}, {'word': 'get_profile', 'menu': 'AbstractUser', 'kind': 'm', 'abbr': 'def get_profile(self):'}, {'word': 'get_short_name', 'menu': 'AbstractBaseUser', 'kind': 'm', 'abbr': 'def get_short_name(self):'}, {'word': 'get_username', 'menu': 'AbstractBaseUser', 'kind': 'm', 'abbr': 'def get_username(self):'}, {'word': 'groups', 'menu': 'PermissionsMixin', 'kind': 'v', 'abbr': 'groups = models.ManyToManyField(Group, verbose_name=_(''groups''),'}, {'word': 'has_module_perms', 'menu': 'PermissionsMixin', 'kind': 'm', 'abbr': 'def has_module_perms(self, app_label):'}, {'word': 'has_perm', 'menu': 'AnonymousUser', 'kind': 'm', 'abbr': 'def has_perm(self, perm, obj=None):'}, {'word': 'has_perms', 'menu': 'AnonymousUser', 'kind': 'm', 'abbr': 'def has_perms(self, perm_list, obj=None):'}, {'word': 'has_usable_password', 'menu': 'AbstractBaseUser', 'kind': 'm', 'abbr': 'def has_usable_password(self):'}, {'word': 'help_text', 'menu': 'PermissionsMixin', 'kind': 'v', 'abbr': 'help_text=_(''Designates that this user has all permissions without '''}, {'word': 'id', 'menu': 'AnonymousUser', 'kind': 'v', 'abbr': 'id = None'}, {'word': 'is_active', 'menu': 'AnonymousUser', 'kind': 'v', 'abbr': 'is_active = False'}, {'word': 'is_anonymous', 'menu': 'AbstractBaseUser', 'kind': 'm', 'abbr': 'def is_anonymous(self):'}, {'word': 'is_authenticated', 'menu': 'AbstractBaseUser', 'kind': 'm', 'abbr': 'def is_authenticated(self):'}, {'word': 'is_staff', 'menu': 'AnonymousUser', 'kind': 'v', 'abbr': 'is_staff = False'}, {'word': 'is_superuser', 'menu': 'AnonymousUser', 'kind': 'v', 'abbr': 'is_superuser = False'}, {'word': 'last_login', 'menu': 'AbstractBaseUser', 'kind': 'v', 'abbr': 'last_login = models.DateTimeField(_(''last login''), default=timezone.now)'}, {'word': 'last_name', 'menu': 'AbstractUser', 'kind': 'v', 'abbr': 'last_name'}, {'word': 'make_random_password', 'menu': 'BaseUserManager', 'kind': 'm', 'abbr': 'make_random_password'}, {'word': 'name', 'menu': 'Permission', 'kind': 'v', 'abbr': 'name'}, {'word': 'natural_key', 'menu': 'AbstractBaseUser', 'kind': 'm', 'abbr': 'def natural_key(self):'}, {'word': 'normalize_email', 'menu': 'BaseUserManager', 'kind': 'm', 'abbr': 'def normalize_email(cls, email):'}, {'word': 'objects', 'menu': 'Group', 'kind': 'v', 'abbr': 'objects = GroupManager()'}, {'word': 'ordering', 'menu': 'Permission.Meta', 'kind': 'v', 'abbr': 'ordering = (''content_type__app_label'', ''content_type__model'','}, {'word': 'password', 'menu': 'AbstractBaseUser', 'kind': 'v', 'abbr': 'password'}, {'word': 'permissions', 'menu': 'Group', 'kind': 'v', 'abbr': 'permissions = models.ManyToManyField(Permission,'}, {'word': 'pk', 'menu': 'AnonymousUser', 'kind': 'v', 'abbr': 'pk = None'}, {'word': 'save', 'menu': 'AnonymousUser', 'kind': 'm', 'abbr': 'def save(self):'}, {'word': 'set_password', 'menu': 'AbstractBaseUser', 'kind': 'm', 'abbr': 'def set_password(self, raw_password):'}, {'word': 'set_unusable_password', 'menu': 'AbstractBaseUser', 'kind': 'm', 'abbr': 'def set_unusable_password(self):'}, {'word': 'setter', 'menu': '[I]', 'kind': 'f', 'abbr': 'def setter(raw_password):'}, {'word': 'swappable', 'menu': 'User.Meta', 'kind': 'v', 'abbr': 'swappable = ''AUTH_USER_MODEL'''}, {'word': 'unique_together', 'menu': 'Permission.Meta', 'kind': 'v', 'abbr': 'unique_together = ((''content_type'', ''codename''),)'}, {'word': 'update_last_login', 'menu': '[I]', 'kind': 'f', 'abbr': 'def update_last_login(sender, user, **kwargs):'}, {'word': 'user_permissions', 'menu': 'PermissionsMixin', 'kind': 'v', 'abbr': 'user_permissions = models.ManyToManyField(Permission,'}, {'word': 'username', 'menu': 'AnonymousUser', 'kind': 'v', 'abbr': 'username = '''''}, {'word': 'validators', 'menu': 'AbstractUser', 'kind': 'v', 'abbr': 'validators=['}, {'word': 'verbose_name', 'menu': 'Group.Meta', 'kind': 'v', 'abbr': 'verbose_name = _(''group'')'}, {'word': 'verbose_name_plural', 'menu': 'Group.Meta', 'kind': 'v', 'abbr': 'verbose_name_plural = _(''groups'')'}]
