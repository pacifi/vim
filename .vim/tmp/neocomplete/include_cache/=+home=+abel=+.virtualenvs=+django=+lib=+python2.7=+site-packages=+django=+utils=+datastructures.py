[{'word': 'DictWrapper', 'menu': '[I]', 'kind': 'c', 'abbr': 'DictWrapper(dict): <class>'}, {'word': 'ImmutableList', 'menu': '[I]', 'kind': 'c', 'abbr': 'ImmutableList(tuple): <class>'}, {'word': 'MergeDict', 'menu': '[I]', 'kind': 'c', 'abbr': 'MergeDict(object): <class>'}, {'word': 'MultiValueDict', 'menu': '[I]', 'kind': 'c', 'abbr': 'MultiValueDict(dict): <class>'}, {'word': 'MultiValueDictKeyError', 'menu': '[I]', 'kind': 'c', 'abbr': 'MultiValueDictKeyError(KeyError): <class>'}, {'word': 'SortedDict', 'menu': '[I]', 'kind': 'c', 'abbr': 'SortedDict(dict): <class>'}, {'word': '__contains__', 'menu': 'MergeDict', 'kind': 'v', 'abbr': '__contains__ = has_key'}, {'word': '__delitem__', 'menu': 'ImmutableList', 'kind': 'v', 'abbr': '__delitem__ = complain'}, {'word': '__delslice__', 'menu': 'ImmutableList', 'kind': 'v', 'abbr': '__delslice__ = complain'}, {'word': '__iadd__', 'menu': 'ImmutableList', 'kind': 'v', 'abbr': '__iadd__ = complain'}, {'word': '__imul__', 'menu': 'ImmutableList', 'kind': 'v', 'abbr': '__imul__ = complain'}, {'word': '__init__', 'menu': 'MergeDict', 'kind': 'm', 'abbr': 'def __init__(self, *dicts):'}, {'word': '__iter__', 'menu': 'MergeDict', 'kind': 'v', 'abbr': '__iter__ = _iterkeys'}, {'word': '__setitem__', 'menu': 'ImmutableList', 'kind': 'v', 'abbr': '__setitem__ = complain'}, {'word': '__setslice__', 'menu': 'ImmutableList', 'kind': 'v', 'abbr': '__setslice__ = complain'}, {'word': '_iteritems', 'menu': 'MergeDict', 'kind': 'm', 'abbr': 'def _iteritems(self):'}, {'word': '_iterkeys', 'menu': 'MergeDict', 'kind': 'm', 'abbr': 'def _iterkeys(self):'}, {'word': '_iterlists', 'menu': 'MultiValueDict', 'kind': 'm', 'abbr': 'def _iterlists(self):'}, {'word': '_itervalues', 'menu': 'MergeDict', 'kind': 'm', 'abbr': 'def _itervalues(self):'}, {'word': 'append', 'menu': 'ImmutableList', 'kind': 'v', 'abbr': 'append = complain'}, {'word': 'appendlist', 'menu': 'MultiValueDict', 'kind': 'm', 'abbr': 'def appendlist(self, key, value):'}, {'word': 'clear', 'menu': 'SortedDict', 'kind': 'm', 'abbr': 'def clear(self):'}, {'word': 'complain', 'menu': 'ImmutableList', 'kind': 'm', 'abbr': 'def complain(self, *wargs, **kwargs):'}, {'word': 'copy', 'menu': 'MergeDict', 'kind': 'm', 'abbr': 'def copy(self):'}, {'word': 'dict', 'menu': 'MultiValueDict', 'kind': 'm', 'abbr': 'def dict(self):'}, {'word': 'extend', 'menu': 'ImmutableList', 'kind': 'v', 'abbr': 'extend = complain'}, {'word': 'get', 'menu': 'MergeDict', 'kind': 'm', 'abbr': 'def get(self, key, default=None):'}, {'word': 'getlist', 'menu': 'MergeDict', 'kind': 'm', 'abbr': 'def getlist(self, key):'}, {'word': 'has_key', 'menu': 'MergeDict', 'kind': 'm', 'abbr': 'def has_key(self, key):'}, {'word': 'insert', 'menu': 'SortedDict', 'kind': 'm', 'abbr': 'def insert(self, index, key, value):'}, {'word': 'items', 'menu': '[I]', 'kind': 'f', 'abbr': 'def items(self):'}, {'word': 'keys', 'menu': '[I]', 'kind': 'f', 'abbr': 'def keys(self):'}, {'word': 'lists', 'menu': '[I]', 'kind': 'f', 'abbr': 'def lists(self):'}, {'word': 'pop', 'menu': 'SortedDict', 'kind': 'm', 'abbr': 'def pop(self, k, *args):'}, {'word': 'popitem', 'menu': 'SortedDict', 'kind': 'm', 'abbr': 'def popitem(self):'}, {'word': 'remove', 'menu': 'ImmutableList', 'kind': 'v', 'abbr': 'remove = complain'}, {'word': 'reverse', 'menu': 'ImmutableList', 'kind': 'v', 'abbr': 'reverse = complain'}, {'word': 'setdefault', 'menu': 'SortedDict', 'kind': 'm', 'abbr': 'def setdefault(self, key, default):'}, {'word': 'setlist', 'menu': 'MultiValueDict', 'kind': 'm', 'abbr': 'def setlist(self, key, list_):'}, {'word': 'setlistdefault', 'menu': 'MultiValueDict', 'kind': 'm', 'abbr': 'def setlistdefault(self, key, default_list=None):'}, {'word': 'sort', 'menu': 'ImmutableList', 'kind': 'v', 'abbr': 'sort = complain'}, {'word': 'update', 'menu': 'MultiValueDict', 'kind': 'm', 'abbr': 'def update(self, *args, **kwargs):'}, {'word': 'value_for_index', 'menu': 'SortedDict', 'kind': 'm', 'abbr': 'def value_for_index(self, index):'}, {'word': 'values', 'menu': '[I]', 'kind': 'f', 'abbr': 'def values(self):'}]
