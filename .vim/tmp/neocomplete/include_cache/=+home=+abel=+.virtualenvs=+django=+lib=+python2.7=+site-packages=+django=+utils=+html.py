[{'word': 'DOTS', 'menu': '[I]', 'kind': 'v', 'abbr': 'DOTS'}, {'word': 'MLStripper', 'menu': '[I]', 'kind': 'c', 'abbr': 'MLStripper(HTMLParser): <class>'}, {'word': 'TRAILING_PUNCTUATION', 'menu': '[I]', 'kind': 'v', 'abbr': 'TRAILING_PUNCTUATION = [''.'', '','', '':'', '';'', ''.)'']'}, {'word': 'WRAPPING_PUNCTUATION', 'menu': '[I]', 'kind': 'v', 'abbr': 'WRAPPING_PUNCTUATION = [(''('', '')''), (''<'', ''>''), (''['', '']''), (''&lt;'', ''&gt;'')]'}, {'word': '__init__', 'menu': 'MLStripper', 'kind': 'm', 'abbr': 'def __init__(self):'}, {'word': '_js_escapes', 'menu': '[I]', 'kind': 'v', 'abbr': '_js_escapes = {'}, {'word': 'avoid_wrapping', 'menu': '[I]', 'kind': 'f', 'abbr': 'def avoid_wrapping(value):'}, {'word': 'clean_html', 'menu': '[I]', 'kind': 'v', 'abbr': 'clean_html = allow_lazy(clean_html, six.text_type)'}, {'word': 'conditional_escape', 'menu': '[I]', 'kind': 'f', 'abbr': 'def conditional_escape(text):'}, {'word': 'escape', 'menu': '[I]', 'kind': 'f', 'abbr': 'def escape(text):'}, {'word': 'escapejs', 'menu': '[I]', 'kind': 'f', 'abbr': 'def escapejs(value):'}, {'word': 'fix_ampersands', 'menu': '[I]', 'kind': 'f', 'abbr': 'def fix_ampersands(value):'}, {'word': 'format_html', 'menu': '[I]', 'kind': 'f', 'abbr': 'def format_html(format_string, *args, **kwargs):'}, {'word': 'format_html_join', 'menu': '[I]', 'kind': 'f', 'abbr': 'def format_html_join(sep, format_string, args_generator):'}, {'word': 'get_data', 'menu': 'MLStripper', 'kind': 'm', 'abbr': 'def get_data(self):'}, {'word': 'handle_charref', 'menu': 'MLStripper', 'kind': 'm', 'abbr': 'def handle_charref(self, name):'}, {'word': 'handle_data', 'menu': 'MLStripper', 'kind': 'm', 'abbr': 'def handle_data(self, d):'}, {'word': 'handle_entityref', 'menu': 'MLStripper', 'kind': 'm', 'abbr': 'def handle_entityref(self, name):'}, {'word': 'hard_coded_bullets_re', 'menu': '[I]', 'kind': 'v', 'abbr': 'hard_coded_bullets_re = re.compile(r''((?:<p>(?:%s).*?[a-zA-Z].*?</p>\s*)+)'' % ''|''.join([re.escape(x) for x in DOTS]), re.DOTALL)'}, {'word': 'html_gunk_re', 'menu': '[I]', 'kind': 'v', 'abbr': 'html_gunk_re = re.compile(r''(?:<br clear="all">|<i><\/i>|<b><\/b>|<em><\/em>|<strong><\/strong>|<\/?smallcaps>|<\/?uppercase>)'', re.IGNORECASE)'}, {'word': 'linebreaks', 'menu': '[I]', 'kind': 'f', 'abbr': 'def linebreaks(value, autoescape=False):'}, {'word': 'link_target_attribute_re', 'menu': '[I]', 'kind': 'v', 'abbr': 'link_target_attribute_re = re.compile(r''(<a [^>]*?)target=[^\s>]+'')'}, {'word': 'remove_tags', 'menu': '[I]', 'kind': 'f', 'abbr': 'def remove_tags(html, tags):'}, {'word': 'replace_p_tags', 'menu': '[I]', 'kind': 'f', 'abbr': 'def replace_p_tags(match):'}, {'word': 'simple_email_re', 'menu': '[I]', 'kind': 'v', 'abbr': 'simple_email_re = re.compile(r''^\S+@\S+\.\S+$'')'}, {'word': 'simple_url_2_re', 'menu': '[I]', 'kind': 'v', 'abbr': 'simple_url_2_re'}, {'word': 'simple_url_re', 'menu': '[I]', 'kind': 'v', 'abbr': 'simple_url_re = re.compile(r''^https?://\[?\w'', re.IGNORECASE)'}, {'word': 'smart_urlquote', 'menu': '[I]', 'kind': 'f', 'abbr': 'def smart_urlquote(url):'}, {'word': 'strip_entities', 'menu': '[I]', 'kind': 'f', 'abbr': 'def strip_entities(value):'}, {'word': 'strip_spaces_between_tags', 'menu': '[I]', 'kind': 'f', 'abbr': 'def strip_spaces_between_tags(value):'}, {'word': 'strip_tags', 'menu': '[I]', 'kind': 'f', 'abbr': 'def strip_tags(value):'}, {'word': 'trailing_empty_content_re', 'menu': '[I]', 'kind': 'v', 'abbr': 'trailing_empty_content_re = re.compile(r''(?:<p>(?:&nbsp;|\s|<br \/>)*?</p>\s*)+\Z'')'}, {'word': 'trim_url', 'menu': '[I]', 'kind': 'f', 'abbr': 'def trim_url(x, limit=trim_url_limit):'}, {'word': 'unencoded_ampersands_re', 'menu': '[I]', 'kind': 'v', 'abbr': 'unencoded_ampersands_re = re.compile(r''&(?!(\w+|#\d+);)'')'}, {'word': 'urlize', 'menu': '[I]', 'kind': 'f', 'abbr': 'def urlize(text, trim_url_limit=None, nofollow=False, autoescape=False):'}, {'word': 'word_split_re', 'menu': '[I]', 'kind': 'v', 'abbr': 'word_split_re = re.compile(r''(\s+)'')'}]
