[{'word': 'Message', 'menu': '[I]', 'kind': 'c', 'abbr': 'Message'}, {'word': '__all__', 'menu': '[I]', 'kind': 'v', 'abbr': '__all__ = ["Message","choose_boundary","encode","decode","copyliteral",'}, {'word': '__init__', 'menu': 'Message', 'kind': 'm', 'abbr': '__init__'}, {'word': '_counter', 'menu': '[I]', 'kind': 'v', 'abbr': '_counter'}, {'word': '_counter_lock', 'menu': '[I]', 'kind': 'v', 'abbr': '_counter_lock = thread.allocate_lock()'}, {'word': '_get_next_counter', 'menu': '[I]', 'kind': 'f', 'abbr': 'def _get_next_counter():'}, {'word': '_prefix', 'menu': '[I]', 'kind': 'v', 'abbr': '_prefix = None'}, {'word': 'choose_boundary', 'menu': '[I]', 'kind': 'f', 'abbr': 'def choose_boundary():'}, {'word': 'copybinary', 'menu': '[I]', 'kind': 'f', 'abbr': 'def copybinary(input, output):'}, {'word': 'copyliteral', 'menu': '[I]', 'kind': 'f', 'abbr': 'def copyliteral(input, output):'}, {'word': 'decode', 'menu': '[I]', 'kind': 'f', 'abbr': 'def decode(input, output, encoding):'}, {'word': 'decodetab', 'menu': '[I]', 'kind': 'v', 'abbr': 'decodetab = {'}, {'word': 'encode', 'menu': '[I]', 'kind': 'f', 'abbr': 'def encode(input, output, encoding):'}, {'word': 'encodetab', 'menu': '[I]', 'kind': 'v', 'abbr': 'encodetab = {'}, {'word': 'getencoding', 'menu': 'Message', 'kind': 'm', 'abbr': 'def getencoding(self):'}, {'word': 'getmaintype', 'menu': 'Message', 'kind': 'm', 'abbr': 'def getmaintype(self):'}, {'word': 'getparam', 'menu': 'Message', 'kind': 'm', 'abbr': 'def getparam(self, name):'}, {'word': 'getparamnames', 'menu': 'Message', 'kind': 'm', 'abbr': 'def getparamnames(self):'}, {'word': 'getplist', 'menu': 'Message', 'kind': 'm', 'abbr': 'def getplist(self):'}, {'word': 'getsubtype', 'menu': 'Message', 'kind': 'm', 'abbr': 'def getsubtype(self):'}, {'word': 'gettype', 'menu': 'Message', 'kind': 'm', 'abbr': 'def gettype(self):'}, {'word': 'parseplist', 'menu': 'Message', 'kind': 'm', 'abbr': 'def parseplist(self):'}, {'word': 'parsetype', 'menu': 'Message', 'kind': 'm', 'abbr': 'def parsetype(self):'}, {'word': 'pipethrough', 'menu': '[I]', 'kind': 'f', 'abbr': 'def pipethrough(input, command, output):'}, {'word': 'pipeto', 'menu': '[I]', 'kind': 'f', 'abbr': 'def pipeto(input, command):'}, {'word': 'stacklevel', 'menu': '[I]', 'kind': 'v', 'abbr': 'stacklevel'}]
