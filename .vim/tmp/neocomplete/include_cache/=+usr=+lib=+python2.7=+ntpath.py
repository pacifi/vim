[{'word': '__all__', 'menu': '[I]', 'kind': 'v', 'abbr': '__all__ = ["normcase","isabs","join","splitdrive","split","splitext",'}, {'word': '_abspath_split', 'menu': '[I]', 'kind': 'f', 'abbr': 'def _abspath_split(path):'}, {'word': 'abspath', 'menu': '[I]', 'kind': 'f', 'abbr': 'def abspath(path):'}, {'word': 'altsep', 'menu': '[I]', 'kind': 'v', 'abbr': 'altsep = ''/'''}, {'word': 'basename', 'menu': '[I]', 'kind': 'f', 'abbr': 'def basename(p):'}, {'word': 'curdir', 'menu': '[I]', 'kind': 'v', 'abbr': 'curdir = ''.'''}, {'word': 'defpath', 'menu': '[I]', 'kind': 'v', 'abbr': 'defpath = ''\\Windows'''}, {'word': 'devnull', 'menu': '[I]', 'kind': 'v', 'abbr': 'devnull = ''nul'''}, {'word': 'dirname', 'menu': '[I]', 'kind': 'f', 'abbr': 'def dirname(p):'}, {'word': 'expanduser', 'menu': '[I]', 'kind': 'f', 'abbr': 'def expanduser(path):'}, {'word': 'expandvars', 'menu': '[I]', 'kind': 'f', 'abbr': 'def expandvars(path):'}, {'word': 'extsep', 'menu': '[I]', 'kind': 'v', 'abbr': 'extsep = ''.'''}, {'word': 'getenv', 'menu': '[I]', 'kind': 'f', 'abbr': 'def getenv(var):'}, {'word': 'isabs', 'menu': '[I]', 'kind': 'f', 'abbr': 'def isabs(s):'}, {'word': 'islink', 'menu': '[I]', 'kind': 'f', 'abbr': 'def islink(path):'}, {'word': 'ismount', 'menu': '[I]', 'kind': 'f', 'abbr': 'def ismount(path):'}, {'word': 'join', 'menu': '[I]', 'kind': 'f', 'abbr': 'def join(path, *paths):'}, {'word': 'lexists', 'menu': '[I]', 'kind': 'v', 'abbr': 'lexists = exists'}, {'word': 'normcase', 'menu': '[I]', 'kind': 'f', 'abbr': 'def normcase(s):'}, {'word': 'normpath', 'menu': '[I]', 'kind': 'f', 'abbr': 'def normpath(path):'}, {'word': 'pardir', 'menu': '[I]', 'kind': 'v', 'abbr': 'pardir = ''..'''}, {'word': 'pathsep', 'menu': '[I]', 'kind': 'v', 'abbr': 'pathsep = '';'''}, {'word': 'realpath', 'menu': '[I]', 'kind': 'v', 'abbr': 'realpath = abspath'}, {'word': 'relpath', 'menu': '[I]', 'kind': 'f', 'abbr': 'def relpath(path, start=curdir):'}, {'word': 'sep', 'menu': '[I]', 'kind': 'v', 'abbr': 'sep = ''\\'''}, {'word': 'split', 'menu': '[I]', 'kind': 'f', 'abbr': 'def split(p):'}, {'word': 'splitdrive', 'menu': '[I]', 'kind': 'f', 'abbr': 'def splitdrive(p):'}, {'word': 'splitext', 'menu': '[I]', 'kind': 'f', 'abbr': 'def splitext(p):'}, {'word': 'splitunc', 'menu': '[I]', 'kind': 'f', 'abbr': 'def splitunc(p):'}, {'word': 'supports_unicode_filenames', 'menu': '[I]', 'kind': 'v', 'abbr': 'supports_unicode_filenames = (hasattr(sys, "getwindowsversion") and'}, {'word': 'walk', 'menu': '[I]', 'kind': 'f', 'abbr': 'def walk(top, func, arg):'}]
