[{'word': 'AbstractBasicAuthHandler', 'menu': '[I]', 'kind': 'c', 'abbr': 'AbstractBasicAuthHandler: <class>'}, {'word': 'AbstractDigestAuthHandler', 'menu': '[I]', 'kind': 'c', 'abbr': 'AbstractDigestAuthHandler: <class>'}, {'word': 'AbstractHTTPHandler', 'menu': '[I]', 'kind': 'c', 'abbr': 'AbstractHTTPHandler(BaseHandler): <class>'}, {'word': 'BaseHandler', 'menu': '[I]', 'kind': 'c', 'abbr': 'BaseHandler: <class>'}, {'word': 'CacheFTPHandler', 'menu': '[I]', 'kind': 'c', 'abbr': 'CacheFTPHandler(FTPHandler): <class>'}, {'word': 'FTPHandler', 'menu': '[I]', 'kind': 'c', 'abbr': 'FTPHandler(BaseHandler): <class>'}, {'word': 'FileHandler', 'menu': '[I]', 'kind': 'c', 'abbr': 'FileHandler(BaseHandler): <class>'}, {'word': 'HTTPBasicAuthHandler', 'menu': '[I]', 'kind': 'c', 'abbr': 'HTTPBasicAuthHandler(AbstractBasicAuthHandler, BaseHandler): <class>'}, {'word': 'HTTPCookieProcessor', 'menu': '[I]', 'kind': 'c', 'abbr': 'HTTPCookieProcessor(BaseHandler): <class>'}, {'word': 'HTTPDefaultErrorHandler', 'menu': '[I]', 'kind': 'c', 'abbr': 'HTTPDefaultErrorHandler(BaseHandler): <class>'}, {'word': 'HTTPDigestAuthHandler', 'menu': '[I]', 'kind': 'c', 'abbr': 'HTTPDigestAuthHandler(BaseHandler, AbstractDigestAuthHandler): <class>'}, {'word': 'HTTPError', 'menu': '[I]', 'kind': 'c', 'abbr': 'HTTPError(URLError, addinfourl): <class>'}, {'word': 'HTTPErrorProcessor', 'menu': '[I]', 'kind': 'c', 'abbr': 'HTTPErrorProcessor(BaseHandler): <class>'}, {'word': 'HTTPHandler', 'menu': '[I]', 'kind': 'c', 'abbr': 'HTTPHandler(AbstractHTTPHandler): <class>'}, {'word': 'HTTPPasswordMgr', 'menu': '[I]', 'kind': 'c', 'abbr': 'HTTPPasswordMgr: <class>'}, {'word': 'HTTPPasswordMgrWithDefaultRealm', 'menu': '[I]', 'kind': 'c', 'abbr': 'HTTPPasswordMgrWithDefaultRealm(HTTPPasswordMgr): <class>'}, {'word': 'HTTPRedirectHandler', 'menu': '[I]', 'kind': 'c', 'abbr': 'HTTPRedirectHandler(BaseHandler): <class>'}, {'word': 'HTTPSHandler', 'menu': '[I]', 'kind': 'c', 'abbr': 'HTTPSHandler(AbstractHTTPHandler): <class>'}, {'word': 'OpenerDirector', 'menu': '[I]', 'kind': 'c', 'abbr': 'OpenerDirector: <class>'}, {'word': 'ProxyBasicAuthHandler', 'menu': '[I]', 'kind': 'c', 'abbr': 'ProxyBasicAuthHandler(AbstractBasicAuthHandler, BaseHandler): <class>'}, {'word': 'ProxyDigestAuthHandler', 'menu': '[I]', 'kind': 'c', 'abbr': 'ProxyDigestAuthHandler(BaseHandler, AbstractDigestAuthHandler): <class>'}, {'word': 'ProxyHandler', 'menu': '[I]', 'kind': 'c', 'abbr': 'ProxyHandler(BaseHandler): <class>'}, {'word': 'Request', 'menu': '[I]', 'kind': 'c', 'abbr': 'Request: <class>'}, {'word': 'URLError', 'menu': '[I]', 'kind': 'c', 'abbr': 'URLError(IOError): <class>'}, {'word': 'UnknownHandler', 'menu': '[I]', 'kind': 'c', 'abbr': 'UnknownHandler(BaseHandler): <class>'}, {'word': '__init__', 'menu': 'CacheFTPHandler', 'kind': 'm', 'abbr': 'def __init__(self):'}, {'word': '__super_init', 'menu': 'HTTPError', 'kind': 'v', 'abbr': '__super_init = addinfourl.__init__'}, {'word': '__version__', 'menu': '[I]', 'kind': 'v', 'abbr': '__version__'}, {'word': '_call_chain', 'menu': 'OpenerDirector', 'kind': 'm', 'abbr': 'def _call_chain(self, chain, kind, meth_name, *args):'}, {'word': '_cut_port_re', 'menu': '[I]', 'kind': 'v', 'abbr': '_cut_port_re = re.compile(r":\d+$")'}, {'word': '_open', 'menu': 'OpenerDirector', 'kind': 'm', 'abbr': 'def _open(self, req, data=None):'}, {'word': '_opener', 'menu': '[I]', 'kind': 'v', 'abbr': '_opener = None'}, {'word': '_parse_proxy', 'menu': '[I]', 'kind': 'f', 'abbr': 'def _parse_proxy(proxy):'}, {'word': '_safe_gethostbyname', 'menu': '[I]', 'kind': 'f', 'abbr': 'def _safe_gethostbyname(host):'}, {'word': 'add_data', 'menu': 'Request', 'kind': 'm', 'abbr': 'def add_data(self, data):'}, {'word': 'add_handler', 'menu': 'OpenerDirector', 'kind': 'm', 'abbr': 'def add_handler(self, handler):'}, {'word': 'add_header', 'menu': 'Request', 'kind': 'm', 'abbr': 'def add_header(self, key, val):'}, {'word': 'add_parent', 'menu': 'BaseHandler', 'kind': 'm', 'abbr': 'def add_parent(self, parent):'}, {'word': 'add_password', 'menu': 'HTTPPasswordMgr', 'kind': 'm', 'abbr': 'def add_password(self, realm, uri, user, passwd):'}, {'word': 'add_unredirected_header', 'menu': 'Request', 'kind': 'm', 'abbr': 'def add_unredirected_header(self, key, val):'}, {'word': 'auth_header', 'menu': 'HTTPBasicAuthHandler', 'kind': 'v', 'abbr': 'auth_header = ''Authorization'''}, {'word': 'build_opener', 'menu': '[I]', 'kind': 'f', 'abbr': 'def build_opener(*handlers):'}, {'word': 'check_cache', 'menu': 'CacheFTPHandler', 'kind': 'm', 'abbr': 'def check_cache(self):'}, {'word': 'clear_cache', 'menu': 'CacheFTPHandler', 'kind': 'm', 'abbr': 'def clear_cache(self):'}, {'word': 'close', 'menu': 'BaseHandler', 'kind': 'm', 'abbr': 'def close(self):'}, {'word': 'connect_ftp', 'menu': 'CacheFTPHandler', 'kind': 'm', 'abbr': 'def connect_ftp(self, user, passwd, host, port, dirs, timeout):'}, {'word': 'do_open', 'menu': 'AbstractHTTPHandler', 'kind': 'm', 'abbr': 'def do_open(self, http_class, req):'}, {'word': 'do_request_', 'menu': 'AbstractHTTPHandler', 'kind': 'm', 'abbr': 'def do_request_(self, request):'}, {'word': 'error', 'menu': 'OpenerDirector', 'kind': 'm', 'abbr': 'def error(self, proto, *args):'}, {'word': 'file_open', 'menu': 'FileHandler', 'kind': 'm', 'abbr': 'def file_open(self, req):'}, {'word': 'find_user_password', 'menu': 'HTTPPasswordMgr', 'kind': 'm', 'abbr': 'def find_user_password(self, realm, authuri):'}, {'word': 'ftp_open', 'menu': 'FTPHandler', 'kind': 'm', 'abbr': 'def ftp_open(self, req):'}, {'word': 'get_algorithm_impls', 'menu': 'AbstractDigestAuthHandler', 'kind': 'm', 'abbr': 'def get_algorithm_impls(self, algorithm):'}, {'word': 'get_authorization', 'menu': 'AbstractDigestAuthHandler', 'kind': 'm', 'abbr': 'def get_authorization(self, req, chal):'}, {'word': 'get_cnonce', 'menu': 'AbstractDigestAuthHandler', 'kind': 'm', 'abbr': 'def get_cnonce(self, nonce):'}, {'word': 'get_data', 'menu': 'Request', 'kind': 'm', 'abbr': 'def get_data(self):'}, {'word': 'get_entity_digest', 'menu': 'AbstractDigestAuthHandler', 'kind': 'm', 'abbr': 'def get_entity_digest(self, data, chal):'}, {'word': 'get_full_url', 'menu': 'Request', 'kind': 'm', 'abbr': 'def get_full_url(self):'}, {'word': 'get_header', 'menu': 'Request', 'kind': 'm', 'abbr': 'def get_header(self, header_name, default=None):'}, {'word': 'get_host', 'menu': 'Request', 'kind': 'm', 'abbr': 'def get_host(self):'}, {'word': 'get_method', 'menu': 'Request', 'kind': 'm', 'abbr': 'def get_method(self):'}, {'word': 'get_names', 'menu': 'FileHandler', 'kind': 'm', 'abbr': 'def get_names(self):'}, {'word': 'get_origin_req_host', 'menu': 'Request', 'kind': 'm', 'abbr': 'def get_origin_req_host(self):'}, {'word': 'get_selector', 'menu': 'Request', 'kind': 'm', 'abbr': 'def get_selector(self):'}, {'word': 'get_type', 'menu': 'Request', 'kind': 'm', 'abbr': 'def get_type(self):'}, {'word': 'handler_order', 'menu': 'ProxyHandler', 'kind': 'v', 'abbr': 'handler_order'}, {'word': 'has_data', 'menu': 'Request', 'kind': 'm', 'abbr': 'def has_data(self):'}, {'word': 'has_header', 'menu': 'Request', 'kind': 'm', 'abbr': 'def has_header(self, header_name):'}, {'word': 'has_proxy', 'menu': 'Request', 'kind': 'm', 'abbr': 'def has_proxy(self):'}, {'word': 'header_items', 'menu': 'Request', 'kind': 'm', 'abbr': 'def header_items(self):'}, {'word': 'http_error_302', 'menu': 'HTTPRedirectHandler', 'kind': 'm', 'abbr': 'http_error_302'}, {'word': 'http_error_401', 'menu': 'HTTPBasicAuthHandler', 'kind': 'm', 'abbr': 'http_error_401'}, {'word': 'http_error_407', 'menu': 'ProxyBasicAuthHandler', 'kind': 'm', 'abbr': 'http_error_407'}, {'word': 'http_error_auth_reqed', 'menu': 'AbstractDigestAuthHandler', 'kind': 'm', 'abbr': 'def http_error_auth_reqed(self, auth_header, host, req, headers):'}, {'word': 'http_error_default', 'menu': 'HTTPDefaultErrorHandler', 'kind': 'm', 'abbr': 'def http_error_default(self, req, fp, code, msg, hdrs):'}, {'word': 'http_open', 'menu': 'HTTPHandler', 'kind': 'm', 'abbr': 'def http_open(self, req):'}, {'word': 'http_request', 'menu': 'HTTPCookieProcessor', 'kind': 'm', 'abbr': 'def http_request(self, request):'}, {'word': 'http_response', 'menu': 'HTTPCookieProcessor', 'kind': 'm', 'abbr': 'def http_response(self, request, response):'}, {'word': 'https_open', 'menu': '.HTTPSHandler', 'kind': 'm', 'abbr': 'def https_open(self, req):'}, {'word': 'https_request', 'menu': '.HTTPSHandler', 'kind': 'v', 'abbr': 'https_request = AbstractHTTPHandler.do_request_'}, {'word': 'https_response', 'menu': 'HTTPCookieProcessor', 'kind': 'v', 'abbr': 'https_response = http_response'}, {'word': 'inf_msg', 'menu': 'HTTPRedirectHandler', 'kind': 'v', 'abbr': 'inf_msg'}, {'word': 'info', 'menu': 'HTTPError', 'kind': 'm', 'abbr': 'def info(self):'}, {'word': 'install_opener', 'menu': '[I]', 'kind': 'f', 'abbr': 'def install_opener(opener):'}, {'word': 'is_suburi', 'menu': 'HTTPPasswordMgr', 'kind': 'm', 'abbr': 'def is_suburi(self, base, test):'}, {'word': 'is_unverifiable', 'menu': 'Request', 'kind': 'm', 'abbr': 'def is_unverifiable(self):'}, {'word': 'isclass', 'menu': '[I]', 'kind': 'f', 'abbr': 'def isclass(obj):'}, {'word': 'max_redirections', 'menu': 'HTTPRedirectHandler', 'kind': 'v', 'abbr': 'max_redirections'}, {'word': 'max_repeats', 'menu': 'HTTPRedirectHandler', 'kind': 'v', 'abbr': 'max_repeats'}, {'word': 'names', 'menu': 'FileHandler', 'kind': 'v', 'abbr': 'names = None'}, {'word': 'open', 'menu': 'OpenerDirector', 'kind': 'm', 'abbr': 'def open(self, fullurl, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT):'}, {'word': 'open_local_file', 'menu': 'FileHandler', 'kind': 'm', 'abbr': 'def open_local_file(self, req):'}, {'word': 'parse_http_list', 'menu': '[I]', 'kind': 'f', 'abbr': 'def parse_http_list(s):'}, {'word': 'parse_keqv_list', 'menu': '[I]', 'kind': 'f', 'abbr': 'def parse_keqv_list(l):'}, {'word': 'proxy_open', 'menu': 'ProxyHandler', 'kind': 'm', 'abbr': 'def proxy_open(self, req, proxy, type):'}, {'word': 'randombytes', 'menu': '[I]', 'kind': 'f', 'abbr': 'def randombytes(n):'}, {'word': 'reason', 'menu': 'HTTPError', 'kind': 'm', 'abbr': 'def reason(self):'}, {'word': 'redirect_request', 'menu': 'HTTPRedirectHandler', 'kind': 'm', 'abbr': 'def redirect_request(self, req, fp, code, msg, headers, newurl):'}, {'word': 'reduce_uri', 'menu': 'HTTPPasswordMgr', 'kind': 'm', 'abbr': 'def reduce_uri(self, uri, default_port=True):'}, {'word': 'request_host', 'menu': '[I]', 'kind': 'f', 'abbr': 'def request_host(request):'}, {'word': 'reset_retry_count', 'menu': 'AbstractBasicAuthHandler', 'kind': 'm', 'abbr': 'def reset_retry_count(self):'}, {'word': 'retry_http_basic_auth', 'menu': 'AbstractBasicAuthHandler', 'kind': 'm', 'abbr': 'def retry_http_basic_auth(self, host, req, realm):'}, {'word': 'retry_http_digest_auth', 'menu': 'AbstractDigestAuthHandler', 'kind': 'm', 'abbr': 'def retry_http_digest_auth(self, req, auth):'}, {'word': 'rx', 'menu': 'AbstractBasicAuthHandler', 'kind': 'v', 'abbr': 'rx = re.compile(''(?:.*,)*[ \t]*([^ \t]+)[ \t]+'''}, {'word': 'setMaxConns', 'menu': 'CacheFTPHandler', 'kind': 'm', 'abbr': 'def setMaxConns(self, m):'}, {'word': 'setTimeout', 'menu': 'CacheFTPHandler', 'kind': 'm', 'abbr': 'def setTimeout(self, t):'}, {'word': 'set_http_debuglevel', 'menu': 'AbstractHTTPHandler', 'kind': 'm', 'abbr': 'def set_http_debuglevel(self, level):'}, {'word': 'set_proxy', 'menu': 'Request', 'kind': 'm', 'abbr': 'def set_proxy(self, host, type):'}, {'word': 'unknown_open', 'menu': 'UnknownHandler', 'kind': 'm', 'abbr': 'def unknown_open(self, req):'}, {'word': 'urlopen', 'menu': '[I]', 'kind': 'f', 'abbr': 'def urlopen(url, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT):'}]
