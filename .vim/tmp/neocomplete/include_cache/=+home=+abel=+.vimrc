[{'word': '.vimrc', 'menu': '[I]', 'kind': 'file', 'abbr': '.vimrc'}, {'word': '<C-h>', 'menu': '[I]', 'kind': 'map', 'abbr': 'map <C-h> <C-w>h'}, {'word': '<C-j>', 'menu': '[I]', 'kind': 'map', 'abbr': 'map <C-j> <C-w>j'}, {'word': '<C-k>', 'menu': '[I]', 'kind': 'map', 'abbr': 'map <C-k> <C-w>k'}, {'word': '<C-l>', 'menu': '[I]', 'kind': 'map', 'abbr': 'map <C-l> <C-w>l'}, {'word': '<F6>', 'menu': '[I]', 'kind': 'map', 'abbr': '<F6>'}, {'word': '<Leader>;', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap <silent><Leader>; :Unite -silent -toggle'}, {'word': '<Leader>B', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap <silent><Leader>B :Unite -silent tab<CR>'}, {'word': '<Leader>K', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap <silent><Leader>K :bd<CR>'}, {'word': '<Leader>L', 'menu': '[I]', 'kind': 'map', 'abbr': 'map <silent> <Leader>L :IndentLinesToggle<CR>'}, {'word': '<Leader>N', 'menu': '[I]', 'kind': 'map', 'abbr': 'nmap <silent><Leader>N :SyntasticCheck<CR>:Errors<CR>'}, {'word': '<Leader>O', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap <silent><Leader>O :Unite -silent -start-insert file_rec/async<CR>'}, {'word': '<Leader>P', 'menu': '[I]', 'kind': 'map', 'abbr': 'map <Leader>P :set invpaste<CR>'}, {'word': '<Leader>X', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap <silent><Leader>X :VimFiler<CR>'}, {'word': '<Leader>``', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap <Leader>`` :qa!<CR>'}, {'word': '<Leader>a', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap <silent><Leader>a :Unite -silent -no-quit grep<CR>'}, {'word': '<Leader>b', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap <silent><Leader>b :Unite -silent buffer<CR>'}, {'word': '<Leader>c', 'menu': '[I]', 'kind': 'map', 'abbr': 'nmap <Leader>c <Plug>CommentaryLine'}, {'word': '<Leader>d', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap <silent><Leader>d :Unite -silent junkfile/new junkfile<CR>'}, {'word': '<Leader>dq', 'menu': '[I]', 'kind': 'map', 'abbr': 'noremap <Leader>dq :Gdiffoff<CR>'}, {'word': '<Leader>du', 'menu': '[I]', 'kind': 'map', 'abbr': 'noremap <Leader>du :diffupdate<CR>'}, {'word': '<Leader>ef', 'menu': '[I]', 'kind': 'map', 'abbr': 'map <Leader>ef :Unite output:WordFrequency<CR>'}, {'word': '<Leader>eh', 'menu': '[I]', 'kind': 'map', 'abbr': 'nmap <Leader>eh :set list!<CR>'}, {'word': '<Leader>eq', 'menu': '[I]', 'kind': 'map', 'abbr': 'map <silent><Leader>eq :set invhlsearch<CR>'}, {'word': '<Leader>es', 'menu': '[I]', 'kind': 'map', 'abbr': 'map <Leader>es g<C-G>'}, {'word': '<Leader>et', 'menu': '[I]', 'kind': 'map', 'abbr': 'nmap <silent><Leader>et :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>'}, {'word': '<Leader>ew', 'menu': '[I]', 'kind': 'map', 'abbr': 'nmap <silent><Leader>ew :call ToggleWrap()<CR>'}, {'word': '<Leader>f', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap <silent><Leader>f :Unite -silent -no-split -start-insert -auto-preview'}, {'word': '<Leader>gA', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap <Leader>gA :exe ''GHA! ''.input("Username or repository: ")<CR>'}, {'word': '<Leader>gB', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap <Leader>gB :Gbrowse<CR>'}, {'word': '<Leader>gD', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap <Leader>gD :exe ''GHD! ''.input("Username: ")<CR>'}, {'word': '<Leader>gE', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap <Leader>gE :Gedit<Space>'}, {'word': '<Leader>gL', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap <Leader>gL :exe "silent Glog -- <Bar> Unite -no-quit'}, {'word': '<Leader>gP', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap <Leader>gP :Git! pull<CR>'}, {'word': '<Leader>gR', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap <Leader>gR :Gremove<CR>'}, {'word': '<Leader>gS', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap <Leader>gS :exe "silent !shipit"<CR>:redraw!<CR>'}, {'word': '<Leader>gb', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap <Leader>gb :Gblame<CR>'}, {'word': '<Leader>gc', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap <Leader>gc :Gcommit<CR>'}, {'word': '<Leader>gd', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap <Leader>gd :Gdiff<CR>'}, {'word': '<Leader>ge', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap <Leader>ge :Gedit<CR>'}, {'word': '<Leader>gg', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap <Leader>gg :exe ''silent Ggrep -i ''.input("Pattern: ")<Bar>Unite'}, {'word': '<Leader>ggc', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap <Leader>ggc :silent! Ggrep -i<Space>'}, {'word': '<Leader>ggm', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap <Leader>ggm :exe ''silent Glog --grep=''.input("Pattern: ").'' <Bar>'}, {'word': '<Leader>ggt', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap <Leader>ggt :exe ''silent Glog -S=''.input("Pattern: ").'' <Bar>'}, {'word': '<Leader>gi', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap <Leader>gi :Git!<Space>'}, {'word': '<Leader>gl', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap <Leader>gl :exe "silent Glog <Bar> Unite -no-quit'}, {'word': '<Leader>gm', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap <Leader>gm :Gmove<Space>'}, {'word': '<Leader>gn', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap <Leader>gn :Unite output:echo\ system("git\ init")<CR>'}, {'word': '<Leader>go', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap <Leader>go :Gread<CR>'}, {'word': '<Leader>gp', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap <Leader>gp :Git! push<CR>'}, {'word': '<Leader>gs', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap <Leader>gs :Gstatus<CR>'}, {'word': '<Leader>gt', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap <Leader>gt :!tig<CR>:redraw!<CR>'}, {'word': '<Leader>gw', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap <Leader>gw :Gwrite<CR>'}, {'word': '<Leader>h', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap <Leader>h <C-w>s'}, {'word': '<Leader>i', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap <silent><Leader>i :Unite -silent history/yank<CR>'}, {'word': '<Leader>j', 'menu': '[I]', 'kind': 'map', 'abbr': 'map <Leader>j :Utl <CR><Bar>:redraw!<CR>'}, {'word': '<Leader>k', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap <Leader>k <C-w>c'}, {'word': '<Leader>l', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap <silent><Leader>l :call ToggleRelativeAbsoluteNumber()<CR>'}, {'word': '<Leader>m', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap <silent><Leader>m :Unite -silent file_mru<CR>'}, {'word': '<Leader>n', 'menu': '[I]', 'kind': 'map', 'abbr': 'nmap <silent><Leader>n :PymodeLint<CR>'}, {'word': '<Leader>o', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap <silent><Leader>o :Unite -silent -start-insert file<CR>'}, {'word': '<Leader>p', 'menu': '[I]', 'kind': 'map', 'abbr': 'map <Leader>p "*p'}, {'word': '<Leader>q', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap <silent> <Leader>q :ToggleQuickfix<CR>'}, {'word': '<Leader>r3', 'menu': '[I]', 'kind': 'map', 'abbr': '<Leader>r3'}, {'word': '<Leader>rc', 'menu': '[I]', 'kind': 'map', 'abbr': 'map <Leader>rc :VimuxPromptCommand<CR>'}, {'word': '<Leader>ri', 'menu': '[I]', 'kind': 'map', 'abbr': 'map <Leader>ri :VimuxInspectRunner<CR>'}, {'word': '<Leader>rl', 'menu': '[I]', 'kind': 'map', 'abbr': 'map <Leader>rl :VimuxRunLastCommand<CR>'}, {'word': '<Leader>rp', 'menu': '[I]', 'kind': 'map', 'abbr': 'map <Leader>rp :call VimuxRunCommand(''clear;cd ''.expand("%:p:h") .'' ;time pypy ''.bufname("%"))<CR>'}, {'word': '<Leader>rq', 'menu': '[I]', 'kind': 'map', 'abbr': 'map <Leader>rq :VimuxCloseRunner<CR>'}, {'word': '<Leader>rr', 'menu': '[I]', 'kind': 'map', 'abbr': '<Leader>rr'}, {'word': '<Leader>rs', 'menu': '[I]', 'kind': 'map', 'abbr': 'map <Leader>rs :VimuxInterruptRunner<CR>'}, {'word': '<Leader>rt', 'menu': '[I]', 'kind': 'map', 'abbr': '<Leader>rt'}, {'word': '<Leader>rw', 'menu': '[I]', 'kind': 'map', 'abbr': 'map <Leader>rw :CoffeeWatch vert<CR>'}, {'word': '<Leader>sa', 'menu': '[I]', 'kind': 'map', 'abbr': 'nmap <Leader>sa zg'}, {'word': '<Leader>sc', 'menu': '[I]', 'kind': 'map', 'abbr': 'nmap <Leader>sc ]sz='}, {'word': '<Leader>se', 'menu': '[I]', 'kind': 'map', 'abbr': 'nmap <Leader>se :setlocal spell spelllang=en<CR>'}, {'word': '<Leader>sn', 'menu': '[I]', 'kind': 'map', 'abbr': 'nmap <Leader>sn ]s'}, {'word': '<Leader>so', 'menu': '[I]', 'kind': 'map', 'abbr': 'nmap <Leader>so :setlocal nospell <CR>'}, {'word': '<Leader>sp', 'menu': '[I]', 'kind': 'map', 'abbr': 'nmap <Leader>sp z='}, {'word': '<Leader>ss', 'menu': '[I]', 'kind': 'map', 'abbr': 'nmap <Leader>ss :setlocal spell spelllang=es<CR>'}, {'word': '<Leader>t', 'menu': '[I]', 'kind': 'map', 'abbr': '<Leader>t'}, {'word': '<Leader>u', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap <Leader>u :GundoToggle<CR>'}, {'word': '<Leader>v', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap <Leader>v <C-w>v'}, {'word': '<Leader>w', 'menu': '[I]', 'kind': 'map', 'abbr': 'nmap <silent> <Leader>w :update<CR>'}, {'word': '<Leader>x', 'menu': '[I]', 'kind': 'map', 'abbr': 'map <Leader>x :call RangerChooser()<CR>'}, {'word': '<Leader>y', 'menu': '[I]', 'kind': 'map', 'abbr': 'map <Leader>y "*y'}, {'word': '<Leader>z', 'menu': '[I]', 'kind': 'map', 'abbr': 'map <Leader>z :ZoomWinTabToggle<CR>'}, {'word': '<LocalLeader>', 'menu': '[I]', 'kind': 'map', 'abbr': 'nmap <LocalLeader> [menu]'}, {'word': '<leader>gV', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap <silent> <leader>gV :Gitv! --all<CR>'}, {'word': '<leader>gv', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap <silent> <leader>gv :Gitv --all<CR>'}, {'word': 'GHDashboard', 'menu': '[I]', 'kind': 'function', 'abbr': 'function! GHDashboard (...)'}, {'word': 'Gdiffoff', 'menu': '[I]', 'kind': 'command', 'abbr': 'command Gdiffoff diffoff | q | Gedit'}, {'word': 'GetColorFormat', 'menu': '[I]', 'kind': 'function', 'abbr': 'function! GetColorFormat()'}, {'word': 'GetColorMethod', 'menu': '[I]', 'kind': 'function', 'abbr': 'function! GetColorMethod()'}, {'word': 'LinesOfCode', 'menu': '[I]', 'kind': 'function', 'abbr': 'function! LinesOfCode()'}, {'word': 'MakeDirIfNoExists', 'menu': '[I]', 'kind': 'function', 'abbr': 'function! MakeDirIfNoExists(path)'}, {'word': 'QuickfixToggle', 'menu': '[I]', 'kind': 'function', 'abbr': 'function! s:QuickfixToggle()'}, {'word': 'RangerChooser', 'menu': '[I]', 'kind': 'function', 'abbr': 'fun! RangerChooser()'}, {'word': 'TmuxOrSplitSwitch', 'menu': '[I]', 'kind': 'function', 'abbr': 'function! TmuxOrSplitSwitch(wincmd, tmuxdir)'}, {'word': 'ToggleQuickfix', 'menu': '[I]', 'kind': 'command', 'abbr': 'command! ToggleQuickfix call <SID>QuickfixToggle()'}, {'word': 'ToggleRelativeAbsoluteNumber', 'menu': '[I]', 'kind': 'function', 'abbr': 'function! ToggleRelativeAbsoluteNumber()'}, {'word': 'ToggleWrap', 'menu': '[I]', 'kind': 'function', 'abbr': 'function! ToggleWrap()'}, {'word': 'WordFrequency', 'menu': '[I]', 'kind': 'command', 'abbr': 'WordFrequency'}, {'word': 'Y', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap Y y\$'}, {'word': '[menu]', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap [menu] <Nop>'}, {'word': '[menu]8', 'menu': '[I]', 'kind': 'map', 'abbr': '[menu]8'}, {'word': '[menu]a', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap <silent>[menu]a :Unite -silent menu:grep<CR>'}, {'word': '[menu]b', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap <silent>[menu]b :Unite -silent menu:navigation<CR>'}, {'word': '[menu]c', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap <silent>[menu]c :Unite -silent menu:colorv<CR>'}, {'word': '[menu]e', 'menu': '[I]', 'kind': 'map', 'abbr': '[menu]e'}, {'word': '[menu]f', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap <silent>[menu]f :Unite -silent menu:searching<CR>'}, {'word': '[menu]g', 'menu': '[I]', 'kind': 'map', 'abbr': '[menu]g'}, {'word': '[menu]i', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap <silent>[menu]i :Unite -silent menu:registers<CR>'}, {'word': '[menu]k', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap <silent>[menu]k :Unite -silent menu:markdown<CR>'}, {'word': '[menu]m', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap <silent>[menu]m :Unite -silent menu:bookmarks<CR>'}, {'word': '[menu]n', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap <silent>[menu]n :Unite -silent -start-insert menu:neobundle<CR>'}, {'word': '[menu]o', 'menu': '[I]', 'kind': 'map', 'abbr': '[menu]o'}, {'word': '[menu]p', 'menu': '[I]', 'kind': 'map', 'abbr': '[menu]p'}, {'word': '[menu]s', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap <silent>[menu]s :Unite -silent menu:spelling<CR>'}, {'word': '[menu]u', 'menu': '[I]', 'kind': 'map', 'abbr': '[menu]u'}, {'word': '[menu]v', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap <silent>[menu]v :Unite menu:vim -silent -start-insert<CR>'}, {'word': '\', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap \ za'}, {'word': 'delimitMate_expand_space', 'menu': '[I]', 'kind': 'variable', 'abbr': 'delimitMate_expand_space'}, {'word': 'g:EasyDigraph_nmap', 'menu': '[I]', 'kind': 'variable', 'abbr': 'let g:EasyDigraph_nmap = ''<Leader>dd'''}, {'word': 'g:Gitv_DoNotMapCtrlKey', 'menu': '[I]', 'kind': 'variable', 'abbr': 'g:Gitv_DoNotMapCtrlKey'}, {'word': 'g:Gitv_OpenHorizontal', 'menu': '[I]', 'kind': 'variable', 'abbr': 'let g:Gitv_OpenHorizontal = ''auto'''}, {'word': 'g:Gitv_WipeAllOnClose', 'menu': '[I]', 'kind': 'variable', 'abbr': 'g:Gitv_WipeAllOnClose'}, {'word': 'g:VimuxUseNearestPane', 'menu': '[I]', 'kind': 'variable', 'abbr': 'g:VimuxUseNearestPane'}, {'word': 'g:airline#extensions#hunks#non_zero_only', 'menu': '[I]', 'kind': 'variable', 'abbr': 'g:airline#extensions#hunks#non_zero_only'}, {'word': 'g:airline_detect_whitespace', 'menu': '[I]', 'kind': 'variable', 'abbr': 'g:airline_detect_whitespace'}, {'word': 'g:airline_enable_branch', 'menu': '[I]', 'kind': 'variable', 'abbr': 'g:airline_enable_branch'}, {'word': 'g:airline_powerline_fonts', 'menu': '[I]', 'kind': 'variable', 'abbr': 'g:airline_powerline_fonts'}, {'word': 'g:airline_theme', 'menu': '[I]', 'kind': 'variable', 'abbr': 'let g:airline_theme=''powerlineish'''}, {'word': 'g:colorv_cache_fav', 'menu': '[I]', 'kind': 'variable', 'abbr': 'let g:colorv_cache_fav=$HOME.''/.vim/tmp/vim_colorv_cache_fav'''}, {'word': 'g:colorv_cache_file', 'menu': '[I]', 'kind': 'variable', 'abbr': 'let g:colorv_cache_file=$HOME.''/.vim/tmp/vim_colorv_cache'''}, {'word': 'g:gundo_preview_bottom', 'menu': '[I]', 'kind': 'variable', 'abbr': 'g:gundo_preview_bottom'}, {'word': 'g:indentLine_char', 'menu': '[I]', 'kind': 'variable', 'abbr': 'let g:indentLine_char = ''┊'''}, {'word': 'g:indentLine_color_term', 'menu': '[I]', 'kind': 'variable', 'abbr': 'g:indentLine_color_term'}, {'word': 'g:indentLine_enabled', 'menu': '[I]', 'kind': 'variable', 'abbr': 'g:indentLine_enabled'}, {'word': 'g:junkfile#directory', 'menu': '[I]', 'kind': 'variable', 'abbr': 'let g:junkfile#directory=expand($HOME."/.vim/tmp/junk")'}, {'word': 'g:neocomplete#data_directory', 'menu': '[I]', 'kind': 'variable', 'abbr': 'let g:neocomplete#data_directory = $HOME.''/.vim/tmp/neocomplete'''}, {'word': 'g:neocomplete#enable_at_startup', 'menu': '[I]', 'kind': 'variable', 'abbr': 'g:neocomplete#enable_at_startup'}, {'word': 'g:neocomplete#enable_auto_select', 'menu': '[I]', 'kind': 'variable', 'abbr': 'g:neocomplete#enable_auto_select'}, {'word': 'g:neocomplete#enable_refresh_always', 'menu': '[I]', 'kind': 'variable', 'abbr': 'g:neocomplete#enable_refresh_always'}, {'word': 'g:neocomplete#enable_smart_case', 'menu': '[I]', 'kind': 'variable', 'abbr': 'g:neocomplete#enable_smart_case'}, {'word': 'g:neocomplete#max_list', 'menu': '[I]', 'kind': 'variable', 'abbr': 'g:neocomplete#max_list'}, {'word': 'g:neocomplete#min_keyword_length', 'menu': '[I]', 'kind': 'variable', 'abbr': 'g:neocomplete#min_keyword_length'}, {'word': 'g:neocomplete#sources#omni#input_patterns', 'menu': '[I]', 'kind': 'variable', 'abbr': 'let g:neocomplete#sources#omni#input_patterns = {}'}, {'word': 'g:neocomplete#sources#syntax#min_keyword_length', 'menu': '[I]', 'kind': 'variable', 'abbr': 'g:neocomplete#sources#syntax#min_keyword_length'}, {'word': 'g:po_translator', 'menu': '[I]', 'kind': 'variable', 'abbr': 'let g:po_translator = "joe di castro <joe@joedicastro.com>"'}, {'word': 'g:pymode_breakpoint_bind', 'menu': '[I]', 'kind': 'variable', 'abbr': 'let g:pymode_breakpoint_bind = ''<Leader>B'''}, {'word': 'g:pymode_lint', 'menu': '[I]', 'kind': 'variable', 'abbr': 'g:pymode_lint'}, {'word': 'g:pymode_lint_checkers', 'menu': '[I]', 'kind': 'variable', 'abbr': 'g:pymode_lint_checkers'}, {'word': 'g:pymode_lint_ignore', 'menu': '[I]', 'kind': 'variable', 'abbr': 'let g:pymode_lint_ignore = '''''}, {'word': 'g:pymode_lint_on_write', 'menu': '[I]', 'kind': 'variable', 'abbr': 'g:pymode_lint_on_write'}, {'word': 'g:pymode_rope', 'menu': '[I]', 'kind': 'variable', 'abbr': 'g:pymode_rope'}, {'word': 'g:pymode_rope_complete_on_dot', 'menu': '[I]', 'kind': 'variable', 'abbr': 'g:pymode_rope_complete_on_dot'}, {'word': 'g:pymode_rope_completion', 'menu': '[I]', 'kind': 'variable', 'abbr': 'g:pymode_rope_completion'}, {'word': 'g:pymode_virtualenv', 'menu': '[I]', 'kind': 'variable', 'abbr': 'g:pymode_virtualenv'}, {'word': 'g:syntastic_error_symbol', 'menu': '[I]', 'kind': 'variable', 'abbr': 'let g:syntastic_error_symbol=''✗'''}, {'word': 'g:syntastic_mode_map', 'menu': '[I]', 'kind': 'variable', 'abbr': 'let g:syntastic_mode_map = { ''mode'': ''active'','}, {'word': 'g:syntastic_python_pylint_exe', 'menu': '[I]', 'kind': 'variable', 'abbr': 'g:syntastic_python_pylint_exe'}, {'word': 'g:syntastic_style_error_symbol', 'menu': '[I]', 'kind': 'variable', 'abbr': 'let g:syntastic_style_error_symbol = ''⚡'''}, {'word': 'g:syntastic_style_warning_symbol', 'menu': '[I]', 'kind': 'variable', 'abbr': 'let g:syntastic_style_warning_symbol = ''⚡'''}, {'word': 'g:syntastic_warning_symbol', 'menu': '[I]', 'kind': 'variable', 'abbr': 'let g:syntastic_warning_symbol=''⚠'''}, {'word': 'g:unite_data_directory', 'menu': '[I]', 'kind': 'variable', 'abbr': 'let g:unite_data_directory = $HOME.''/.vim/tmp/unite'''}, {'word': 'g:unite_enable_short_source_mes', 'menu': '[I]', 'kind': 'variable', 'abbr': 'g:unite_enable_short_source_mes'}, {'word': 'g:unite_enable_start_insert', 'menu': '[I]', 'kind': 'variable', 'abbr': 'g:unite_enable_start_insert'}, {'word': 'g:unite_force_overwrite_statusline', 'menu': '[I]', 'kind': 'variable', 'abbr': 'g:unite_force_overwrite_statusline'}, {'word': 'g:unite_marked_icon', 'menu': '[I]', 'kind': 'variable', 'abbr': 'let g:unite_marked_icon = ''✓'''}, {'word': 'g:unite_prompt', 'menu': '[I]', 'kind': 'variable', 'abbr': 'let g:unite_prompt = ''>>> '''}, {'word': 'g:unite_source_buffer_time_format', 'menu': '[I]', 'kind': 'variable', 'abbr': 'let g:unite_source_buffer_time_format = ''(%d-%m-%Y %H:%M:%S) '''}, {'word': 'g:unite_source_directory_mru_time_format', 'menu': '[I]', 'kind': 'variable', 'abbr': 'let g:unite_source_directory_mru_time_format = ''(%d-%m-%Y %H:%M:%S) '''}, {'word': 'g:unite_source_file_mru_time_format', 'menu': '[I]', 'kind': 'variable', 'abbr': 'let g:unite_source_file_mru_time_format = ''(%d-%m-%Y %H:%M:%S) '''}, {'word': 'g:unite_source_grep_command', 'menu': '[I]', 'kind': 'variable', 'abbr': 'let g:unite_source_grep_command=''ack'''}, {'word': 'g:unite_source_grep_default_opts', 'menu': '[I]', 'kind': 'variable', 'abbr': 'let g:unite_source_grep_default_opts=''--no-group --no-color'''}, {'word': 'g:unite_source_grep_recursive_opt', 'menu': '[I]', 'kind': 'variable', 'abbr': 'let g:unite_source_grep_recursive_opt='''''}, {'word': 'g:unite_source_grep_search_word_highlight', 'menu': '[I]', 'kind': 'variable', 'abbr': 'g:unite_source_grep_search_word_highlight'}, {'word': 'g:unite_source_history_yank_enable', 'menu': '[I]', 'kind': 'variable', 'abbr': 'g:unite_source_history_yank_enable'}, {'word': 'g:unite_source_menu_menus', 'menu': '[I]', 'kind': 'variable', 'abbr': 'let g:unite_source_menu_menus = {}'}, {'word': 'g:unite_split_rule', 'menu': '[I]', 'kind': 'variable', 'abbr': 'let g:unite_split_rule = ''botright'''}, {'word': 'g:unite_update_time', 'menu': '[I]', 'kind': 'variable', 'abbr': 'g:unite_update_time'}, {'word': 'g:unite_winheight', 'menu': '[I]', 'kind': 'variable', 'abbr': 'g:unite_winheight'}, {'word': 'g:utl_cfg_hdl_mt_application_pdf', 'menu': '[I]', 'kind': 'variable', 'abbr': 'let g:utl_cfg_hdl_mt_application_pdf = ''silent :!zathura %p &'''}, {'word': 'g:utl_cfg_hdl_mt_image_gif', 'menu': '[I]', 'kind': 'variable', 'abbr': 'let g:utl_cfg_hdl_mt_image_gif = ''silent :!sxiv %p &'''}, {'word': 'g:utl_cfg_hdl_mt_image_jpeg', 'menu': '[I]', 'kind': 'variable', 'abbr': 'let g:utl_cfg_hdl_mt_image_jpeg = ''silent :!sxiv %p &'''}, {'word': 'g:utl_cfg_hdl_mt_image_png', 'menu': '[I]', 'kind': 'variable', 'abbr': 'let g:utl_cfg_hdl_mt_image_png = ''silent :!sxiv %p &'''}, {'word': 'g:utl_cfg_hdl_scm_http_system', 'menu': '[I]', 'kind': 'variable', 'abbr': 'let g:utl_cfg_hdl_scm_http_system = "silent !firefox %u &"'}, {'word': 'g:vimfiler_as_default_explorer', 'menu': '[I]', 'kind': 'variable', 'abbr': 'g:vimfiler_as_default_explorer'}, {'word': 'g:vimfiler_data_directory', 'menu': '[I]', 'kind': 'variable', 'abbr': 'let g:vimfiler_data_directory = $HOME.''/.vim/tmp/vimfiler'''}, {'word': 'g:vimfiler_file_icon', 'menu': '[I]', 'kind': 'variable', 'abbr': 'let g:vimfiler_file_icon = ''┄'''}, {'word': 'g:vimfiler_force_overwrite_statusline', 'menu': '[I]', 'kind': 'variable', 'abbr': 'g:vimfiler_force_overwrite_statusline'}, {'word': 'g:vimfiler_marked_file_icon', 'menu': '[I]', 'kind': 'variable', 'abbr': 'let g:vimfiler_marked_file_icon = ''✓'''}, {'word': 'g:vimfiler_readonly_file_icon', 'menu': '[I]', 'kind': 'variable', 'abbr': 'let g:vimfiler_readonly_file_icon = ''✗'''}, {'word': 'g:vimfiler_time_format', 'menu': '[I]', 'kind': 'variable', 'abbr': 'let g:vimfiler_time_format = ''%d-%m-%Y %H:%M:%S'''}, {'word': 'g:vimfiler_tree_closed_icon', 'menu': '[I]', 'kind': 'variable', 'abbr': 'let g:vimfiler_tree_closed_icon = ''─'''}, {'word': 'g:vimfiler_tree_leaf_icon', 'menu': '[I]', 'kind': 'variable', 'abbr': 'let g:vimfiler_tree_leaf_icon = ''├'''}, {'word': 'g:vimfiler_tree_opened_icon', 'menu': '[I]', 'kind': 'variable', 'abbr': 'let g:vimfiler_tree_opened_icon = ''┐'''}, {'word': 'g:vinarise_enable_auto_detect', 'menu': '[I]', 'kind': 'variable', 'abbr': 'g:vinarise_enable_auto_detect'}, {'word': 'g:virtualenv_auto_activate', 'menu': '[I]', 'kind': 'variable', 'abbr': 'g:virtualenv_auto_activate'}, {'word': 'g:virtualenv_stl_format', 'menu': '[I]', 'kind': 'variable', 'abbr': 'let g:virtualenv_stl_format = ''(%n)'''}, {'word': 'g:winresizer_keycode_finish', 'menu': '[I]', 'kind': 'variable', 'abbr': 'g:winresizer_keycode_finish'}, {'word': 'g:winresizer_start_key', 'menu': '[I]', 'kind': 'variable', 'abbr': 'let g:winresizer_start_key = ''<C-C><C-W>'''}, {'word': 'g<C-h>', 'menu': '[I]', 'kind': 'map', 'abbr': 'nnoremap <silent> g<C-h> :UniteWithCursorWord -silent help<CR>'}, {'word': 'iCanHazNeoBundle', 'menu': '[I]', 'kind': 'variable', 'abbr': 'iCanHazNeoBundle'}, {'word': 'is', 'menu': '[I]', 'kind': 'function', 'abbr': '\[''▷ find where a function is used (pymode-rope) ⌘ C-C f'','}, {'word': 'json_autocmd', 'menu': '[I]', 'kind': 'augroup', 'abbr': 'augroup json_autocmd'}, {'word': 'mapleader', 'menu': '[I]', 'kind': 'variable', 'abbr': 'let mapleader='','''}, {'word': 'maplocalleader', 'menu': '[I]', 'kind': 'variable', 'abbr': 'let maplocalleader= '' '''}, {'word': 'neobundle_readme', 'menu': '[I]', 'kind': 'variable', 'abbr': 'let neobundle_readme=expand($HOME.''/.vim/bundle/neobundle.vim/README.md'')'}, {'word': 'plugin_commentary', 'menu': '[I]', 'kind': 'augroup', 'abbr': 'augroup plugin_commentary'}, {'word': 'previous_title', 'menu': '[I]', 'kind': 'variable', 'abbr': 'let previous_title = substitute(system("tmux display-message -p ''#{pane_title}''"), ''\n'', '''', '''')'}, {'word': 's:QuickfixToggle', 'menu': '[I]', 'kind': 'function', 'abbr': 'function! s:QuickfixToggle()'}, {'word': 's:vimcustomfile', 'menu': '[I]', 'kind': 'variable', 'abbr': 'let s:vimcustomfile = $HOME.''/.vim/custom.vim'''}, {'word': 'shebang_chmod', 'menu': '[I]', 'kind': 'augroup', 'abbr': 'augroup shebang_chmod'}, {'word': 'w!!', 'menu': '[I]', 'kind': 'map', 'abbr': 'cmap w!! w !sudo tee % >/dev/null<CR>:e!<CR><CR>'}]
