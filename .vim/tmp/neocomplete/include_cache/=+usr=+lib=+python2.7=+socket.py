[{'word': 'EBADF', 'menu': '[I]', 'kind': 'v', 'abbr': 'EBADF'}, {'word': 'EINTR', 'menu': '[I]', 'kind': 'v', 'abbr': 'EINTR'}, {'word': '_GLOBAL_DEFAULT_TIMEOUT', 'menu': '[I]', 'kind': 'v', 'abbr': '_GLOBAL_DEFAULT_TIMEOUT = object()'}, {'word': '__all__', 'menu': '[I]', 'kind': 'v', 'abbr': '__all__ = ["getfqdn", "create_connection"]'}, {'word': '__doc__', 'menu': '_socketobject', 'kind': 'v', 'abbr': '__doc__ = _realsocket.__doc__'}, {'word': '__getattr__', 'menu': '_closedsocket', 'kind': 'v', 'abbr': '__getattr__ = _dummy'}, {'word': '__init__', 'menu': '_socketobject', 'kind': 'm', 'abbr': '__init__'}, {'word': '__slots__', 'menu': '_socketobject', 'kind': 'v', 'abbr': '__slots__ = ["_sock", "__weakref__"] + list(_delegate_methods)'}, {'word': '_closedsocket', 'menu': '[I]', 'kind': 'c', 'abbr': '_closedsocket(object): <class>'}, {'word': '_delegate_methods', 'menu': '[I]', 'kind': 'v', 'abbr': '_delegate_methods = ("recv", "recvfrom", "recv_into", "recvfrom_into",'}, {'word': '_dummy', 'menu': '_closedsocket', 'kind': 'm', 'abbr': 'def _dummy(*args):'}, {'word': '_fileobject', 'menu': '[I]', 'kind': 'c', 'abbr': '_fileobject(object): <class>'}, {'word': '_getclosed', 'menu': '_fileobject', 'kind': 'm', 'abbr': 'def _getclosed(self):'}, {'word': '_realsocket', 'menu': '[I]', 'kind': 'v', 'abbr': '_realsocket = socket'}, {'word': '_socketmethods', 'menu': '[I]', 'kind': 'v', 'abbr': '_socketmethods = _socketmethods + (''ioctl'',)'}, {'word': '_socketobject', 'menu': '[I]', 'kind': 'c', 'abbr': '_socketobject(object): <class>'}, {'word': 'accept', 'menu': '_socketobject', 'kind': 'm', 'abbr': 'def accept(self):'}, {'word': 'close', 'menu': '_fileobject', 'kind': 'm', 'abbr': 'def close(self):'}, {'word': 'closed', 'menu': '_fileobject', 'kind': 'v', 'abbr': 'closed = property(_getclosed, doc="True if the file is closed")'}, {'word': 'create_connection', 'menu': '[I]', 'kind': 'f', 'abbr': 'def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,'}, {'word': 'default_bufsize', 'menu': '_fileobject', 'kind': 'v', 'abbr': 'default_bufsize'}, {'word': 'dup', 'menu': '_socketobject', 'kind': 'm', 'abbr': 'def dup(self):'}, {'word': 'errno', 'menu': '[I]', 'kind': 'v', 'abbr': 'errno = None'}, {'word': 'errorTab', 'menu': '[I]', 'kind': 'v', 'abbr': 'errorTab = {}'}, {'word': 'family', 'menu': '_socketobject', 'kind': 'v', 'abbr': 'family = property(lambda self: self._sock.family, doc="the socket family")'}, {'word': 'fileno', 'menu': '_fileobject', 'kind': 'm', 'abbr': 'def fileno(self):'}, {'word': 'flush', 'menu': '_fileobject', 'kind': 'm', 'abbr': 'def flush(self):'}, {'word': 'getfqdn', 'menu': '[I]', 'kind': 'f', 'abbr': 'def getfqdn(name=''''):'}, {'word': 'makefile', 'menu': '_socketobject', 'kind': 'm', 'abbr': 'makefile'}, {'word': 'meth', 'menu': '[I]', 'kind': 'f', 'abbr': 'def meth(name,self,*args):'}, {'word': 'name', 'menu': '_fileobject', 'kind': 'v', 'abbr': 'name = "<socket>"'}, {'word': 'next', 'menu': '_fileobject', 'kind': 'm', 'abbr': 'def next(self):'}, {'word': 'proto', 'menu': '_socketobject', 'kind': 'v', 'abbr': 'proto = property(lambda self: self._sock.proto, doc="the socket protocol")'}, {'word': 'read', 'menu': '_fileobject', 'kind': 'm', 'abbr': 'read'}, {'word': 'readline', 'menu': '_fileobject', 'kind': 'm', 'abbr': 'readline'}, {'word': 'readlines', 'menu': '_fileobject', 'kind': 'm', 'abbr': 'readlines'}, {'word': 'ssl', 'menu': '[I]', 'kind': 'f', 'abbr': 'def ssl(sock, keyfile=None, certfile=None):'}, {'word': 'type', 'menu': '_socketobject', 'kind': 'v', 'abbr': 'type = property(lambda self: self._sock.type, doc="the socket type")'}, {'word': 'write', 'menu': '_fileobject', 'kind': 'm', 'abbr': 'def write(self, data):'}, {'word': 'writelines', 'menu': '_fileobject', 'kind': 'm', 'abbr': 'def writelines(self, list):'}]
