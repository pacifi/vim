[{'word': 'BoundedQueue', 'menu': '[I]', 'kind': 'c', 'abbr': 'BoundedQueue(_Verbose): <class>'}, {'word': 'BoundedSemaphore', 'menu': '[I]', 'kind': 'f', 'abbr': 'def BoundedSemaphore(*args, **kwargs):'}, {'word': 'Condition', 'menu': '[I]', 'kind': 'f', 'abbr': 'def Condition(*args, **kwargs):'}, {'word': 'ConsumerThread', 'menu': '[I]', 'kind': 'c', 'abbr': 'ConsumerThread(Thread): <class>'}, {'word': 'Event', 'menu': '[I]', 'kind': 'f', 'abbr': 'def Event(*args, **kwargs):'}, {'word': 'Lock', 'menu': '[I]', 'kind': 'v', 'abbr': 'Lock = _allocate_lock'}, {'word': 'ProducerThread', 'menu': '[I]', 'kind': 'c', 'abbr': 'ProducerThread(Thread): <class>'}, {'word': 'RLock', 'menu': '[I]', 'kind': 'f', 'abbr': 'def RLock(*args, **kwargs):'}, {'word': 'Semaphore', 'menu': '[I]', 'kind': 'f', 'abbr': 'def Semaphore(*args, **kwargs):'}, {'word': 'Thread', 'menu': '[I]', 'kind': 'c', 'abbr': 'Thread(_Verbose): <class>'}, {'word': 'ThreadError', 'menu': '[I]', 'kind': 'v', 'abbr': 'ThreadError = thread.error'}, {'word': 'Timer', 'menu': '[I]', 'kind': 'f', 'abbr': 'def Timer(*args, **kwargs):'}, {'word': '_BoundedSemaphore', 'menu': '[I]', 'kind': 'c', 'abbr': '_BoundedSemaphore(_Semaphore): <class>'}, {'word': '_Condition', 'menu': '[I]', 'kind': 'c', 'abbr': '_Condition(_Verbose): <class>'}, {'word': '_DummyThread', 'menu': '[I]', 'kind': 'c', 'abbr': '_DummyThread(Thread): <class>'}, {'word': '_Event', 'menu': '[I]', 'kind': 'c', 'abbr': '_Event(_Verbose): <class>'}, {'word': '_MainThread', 'menu': '[I]', 'kind': 'c', 'abbr': '_MainThread(Thread): <class>'}, {'word': '_RLock', 'menu': '[I]', 'kind': 'c', 'abbr': '_RLock(_Verbose): <class>'}, {'word': '_Semaphore', 'menu': '[I]', 'kind': 'c', 'abbr': '_Semaphore(_Verbose): <class>'}, {'word': '_Timer', 'menu': '[I]', 'kind': 'c', 'abbr': '_Timer(Thread): <class>'}, {'word': '_VERBOSE', 'menu': '[I]', 'kind': 'v', 'abbr': '_VERBOSE = False'}, {'word': '_Verbose', 'menu': '[I]', 'kind': 'c', 'abbr': '_Verbose(object): <class>'}, {'word': '__all__', 'menu': '[I]', 'kind': 'v', 'abbr': '__all__ = [''activeCount'', ''active_count'', ''Condition'', ''currentThread'','}, {'word': '__enter__', 'menu': '_RLock', 'kind': 'v', 'abbr': '__enter__ = acquire'}, {'word': '__exc_clear', 'menu': 'Thread', 'kind': 'v', 'abbr': '__exc_clear = _sys.exc_clear'}, {'word': '__exc_info', 'menu': 'Thread', 'kind': 'v', 'abbr': '__exc_info = _sys.exc_info'}, {'word': '__init__', 'menu': '_test.BoundedQueue', 'kind': 'm', 'abbr': 'def __init__(self, limit):'}, {'word': '__initialized', 'menu': 'Thread', 'kind': 'v', 'abbr': '__initialized = False'}, {'word': '_acquire_restore', 'menu': '_RLock', 'kind': 'm', 'abbr': 'def _acquire_restore(self, count_owner):'}, {'word': '_active', 'menu': '[I]', 'kind': 'v', 'abbr': '_active = {} # maps thread id to Thread object'}, {'word': '_active_limbo_lock', 'menu': '[I]', 'kind': 'v', 'abbr': '_active_limbo_lock = _allocate_lock()'}, {'word': '_after_fork', 'menu': '[I]', 'kind': 'f', 'abbr': 'def _after_fork():'}, {'word': '_allocate_lock', 'menu': '[I]', 'kind': 'v', 'abbr': '_allocate_lock = thread.allocate_lock'}, {'word': '_block', 'menu': 'Thread', 'kind': 'm', 'abbr': 'def _block(self):'}, {'word': '_counter', 'menu': '[I]', 'kind': 'v', 'abbr': '_counter'}, {'word': '_enumerate', 'menu': '[I]', 'kind': 'f', 'abbr': 'def _enumerate():'}, {'word': '_exitfunc', 'menu': '_MainThread', 'kind': 'm', 'abbr': 'def _exitfunc(self):'}, {'word': '_get_ident', 'menu': '[I]', 'kind': 'v', 'abbr': '_get_ident = thread.get_ident'}, {'word': '_is_owned', 'menu': '_Condition', 'kind': 'm', 'abbr': 'def _is_owned(self):'}, {'word': '_limbo', 'menu': '[I]', 'kind': 'v', 'abbr': '_limbo = {}'}, {'word': '_newname', 'menu': '[I]', 'kind': 'f', 'abbr': 'def _newname(template="Thread-%d"):'}, {'word': '_note', 'menu': '_Verbose', 'kind': 'm', 'abbr': 'def _note(self, *args):'}, {'word': '_pickSomeNonDaemonThread', 'menu': '[I]', 'kind': 'f', 'abbr': 'def _pickSomeNonDaemonThread():'}, {'word': '_profile_hook', 'menu': '[I]', 'kind': 'v', 'abbr': '_profile_hook = None'}, {'word': '_release_save', 'menu': '_Condition', 'kind': 'm', 'abbr': 'def _release_save(self):'}, {'word': '_reset_internal_locks', 'menu': 'Thread', 'kind': 'm', 'abbr': 'def _reset_internal_locks(self):'}, {'word': '_set_daemon', 'menu': 'Thread', 'kind': 'm', 'abbr': 'def _set_daemon(self):'}, {'word': '_set_ident', 'menu': 'Thread', 'kind': 'm', 'abbr': 'def _set_ident(self):'}, {'word': '_shutdown', 'menu': '[I]', 'kind': 'v', 'abbr': '_shutdown = _MainThread()._exitfunc'}, {'word': '_start_new_thread', 'menu': '[I]', 'kind': 'v', 'abbr': '_start_new_thread = thread.start_new_thread'}, {'word': '_test', 'menu': '[I]', 'kind': 'f', 'abbr': 'def _test():'}, {'word': '_trace_hook', 'menu': '[I]', 'kind': 'v', 'abbr': '_trace_hook = None'}, {'word': 'acquire', 'menu': '_RLock', 'kind': 'm', 'abbr': 'acquire'}, {'word': 'activeCount', 'menu': '[I]', 'kind': 'f', 'abbr': 'def activeCount():'}, {'word': 'active_count', 'menu': '[I]', 'kind': 'v', 'abbr': 'active_count = activeCount'}, {'word': 'cancel', 'menu': '_Timer', 'kind': 'm', 'abbr': 'def cancel(self):'}, {'word': 'clear', 'menu': '_Event', 'kind': 'm', 'abbr': 'def clear(self):'}, {'word': 'currentThread', 'menu': '[I]', 'kind': 'f', 'abbr': 'def currentThread():'}, {'word': 'current_thread', 'menu': '[I]', 'kind': 'v', 'abbr': 'current_thread = currentThread'}, {'word': 'daemon', 'menu': 'Thread', 'kind': 'm', 'abbr': 'def daemon(self):'}, {'word': 'enumerate', 'menu': '[I]', 'kind': 'f', 'abbr': 'def enumerate():'}, {'word': 'get', 'menu': '_test.BoundedQueue', 'kind': 'm', 'abbr': 'def get(self):'}, {'word': 'getName', 'menu': 'Thread', 'kind': 'm', 'abbr': 'def getName(self):'}, {'word': 'ident', 'menu': 'Thread', 'kind': 'm', 'abbr': 'def ident(self):'}, {'word': 'isAlive', 'menu': 'Thread', 'kind': 'm', 'abbr': 'def isAlive(self):'}, {'word': 'isDaemon', 'menu': 'Thread', 'kind': 'm', 'abbr': 'def isDaemon(self):'}, {'word': 'isSet', 'menu': '_Event', 'kind': 'm', 'abbr': 'def isSet(self):'}, {'word': 'is_alive', 'menu': 'Thread', 'kind': 'v', 'abbr': 'is_alive = isAlive'}, {'word': 'is_set', 'menu': '_Event', 'kind': 'v', 'abbr': 'is_set = isSet'}, {'word': 'join', 'menu': 'Thread', 'kind': 'm', 'abbr': 'def join(self, timeout=None):'}, {'word': 'name', 'menu': 'Thread', 'kind': 'm', 'abbr': 'def name(self):'}, {'word': 'notify', 'menu': '_Condition', 'kind': 'm', 'abbr': 'notify'}, {'word': 'notifyAll', 'menu': '_Condition', 'kind': 'm', 'abbr': 'def notifyAll(self):'}, {'word': 'notify_all', 'menu': '_Condition', 'kind': 'v', 'abbr': 'notify_all = notifyAll'}, {'word': 'put', 'menu': '_test.BoundedQueue', 'kind': 'm', 'abbr': 'def put(self, item):'}, {'word': 'release', 'menu': '_BoundedSemaphore', 'kind': 'm', 'abbr': 'def release(self):'}, {'word': 'run', 'menu': '_test.ConsumerThread', 'kind': 'm', 'abbr': 'def run(self):'}, {'word': 'set', 'menu': '_Event', 'kind': 'm', 'abbr': 'def set(self):'}, {'word': 'setDaemon', 'menu': 'Thread', 'kind': 'm', 'abbr': 'def setDaemon(self, daemonic):'}, {'word': 'setName', 'menu': 'Thread', 'kind': 'm', 'abbr': 'def setName(self, name):'}, {'word': 'setprofile', 'menu': '[I]', 'kind': 'f', 'abbr': 'def setprofile(func):'}, {'word': 'settrace', 'menu': '[I]', 'kind': 'f', 'abbr': 'def settrace(func):'}, {'word': 'start', 'menu': 'Thread', 'kind': 'm', 'abbr': 'def start(self):'}, {'word': 't', 'menu': '_test.ConsumerThread', 'kind': 'v', 'abbr': 't = ProducerThread(Q, NI)'}, {'word': 'wait', 'menu': '_Condition', 'kind': 'm', 'abbr': 'def wait(self, timeout=None):'}]
