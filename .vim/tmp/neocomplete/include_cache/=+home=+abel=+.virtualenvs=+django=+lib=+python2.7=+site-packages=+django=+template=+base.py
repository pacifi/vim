[{'word': 'ALLOWED_VARIABLE_CHARS', 'menu': '[I]', 'kind': 'v', 'abbr': 'ALLOWED_VARIABLE_CHARS = (''abcdefghijklmnopqrstuvwxyz'''}, {'word': 'AssignmentNode', 'menu': '[I]', 'kind': 'c', 'abbr': 'AssignmentNode(TagHelperNode): <class>'}, {'word': 'BLOCK_TAG_END', 'menu': '[I]', 'kind': 'v', 'abbr': 'BLOCK_TAG_END = ''%}'''}, {'word': 'BLOCK_TAG_START', 'menu': '[I]', 'kind': 'v', 'abbr': 'BLOCK_TAG_START = ''{%'''}, {'word': 'COMMENT_TAG_END', 'menu': '[I]', 'kind': 'v', 'abbr': 'COMMENT_TAG_END = ''#}'''}, {'word': 'COMMENT_TAG_START', 'menu': '[I]', 'kind': 'v', 'abbr': 'COMMENT_TAG_START = ''{#'''}, {'word': 'FILTER_ARGUMENT_SEPARATOR', 'menu': '[I]', 'kind': 'v', 'abbr': 'FILTER_ARGUMENT_SEPARATOR = '':'''}, {'word': 'FILTER_SEPARATOR', 'menu': '[I]', 'kind': 'v', 'abbr': 'FILTER_SEPARATOR = ''|'''}, {'word': 'FilterExpression', 'menu': '[I]', 'kind': 'c', 'abbr': 'FilterExpression(object): <class>'}, {'word': 'InclusionNode', 'menu': '[I]', 'kind': 'c', 'abbr': 'InclusionNode(TagHelperNode): <class>'}, {'word': 'InvalidTemplateLibrary', 'menu': '[I]', 'kind': 'c', 'abbr': 'InvalidTemplateLibrary(Exception): <class>'}, {'word': 'Lexer', 'menu': '[I]', 'kind': 'c', 'abbr': 'Lexer(object): <class>'}, {'word': 'Library', 'menu': '[I]', 'kind': 'c', 'abbr': 'Library(object): <class>'}, {'word': 'Node', 'menu': '[I]', 'kind': 'c', 'abbr': 'Node(object): <class>'}, {'word': 'NodeList', 'menu': '[I]', 'kind': 'c', 'abbr': 'NodeList(list): <class>'}, {'word': 'Origin', 'menu': '[I]', 'kind': 'c', 'abbr': 'Origin(object): <class>'}, {'word': 'Parser', 'menu': '[I]', 'kind': 'c', 'abbr': 'Parser(object): <class>'}, {'word': 'SINGLE_BRACE_END', 'menu': '[I]', 'kind': 'v', 'abbr': 'SINGLE_BRACE_END = ''}'''}, {'word': 'SINGLE_BRACE_START', 'menu': '[I]', 'kind': 'v', 'abbr': 'SINGLE_BRACE_START = ''{'''}, {'word': 'SimpleNode', 'menu': '[I]', 'kind': 'c', 'abbr': 'SimpleNode(TagHelperNode): <class>'}, {'word': 'StringOrigin', 'menu': '[I]', 'kind': 'c', 'abbr': 'StringOrigin(Origin): <class>'}, {'word': 'TOKEN_BLOCK', 'menu': '[I]', 'kind': 'v', 'abbr': 'TOKEN_BLOCK'}, {'word': 'TOKEN_COMMENT', 'menu': '[I]', 'kind': 'v', 'abbr': 'TOKEN_COMMENT'}, {'word': 'TOKEN_MAPPING', 'menu': '[I]', 'kind': 'v', 'abbr': 'TOKEN_MAPPING = {'}, {'word': 'TOKEN_TEXT', 'menu': '[I]', 'kind': 'v', 'abbr': 'TOKEN_TEXT'}, {'word': 'TOKEN_VAR', 'menu': '[I]', 'kind': 'v', 'abbr': 'TOKEN_VAR'}, {'word': 'TRANSLATOR_COMMENT_MARK', 'menu': '[I]', 'kind': 'v', 'abbr': 'TRANSLATOR_COMMENT_MARK = ''Translators'''}, {'word': 'TagHelperNode', 'menu': '[I]', 'kind': 'c', 'abbr': 'TagHelperNode(Node): <class>'}, {'word': 'Template', 'menu': '[I]', 'kind': 'c', 'abbr': 'Template(object): <class>'}, {'word': 'TemplateDoesNotExist', 'menu': '[I]', 'kind': 'c', 'abbr': 'TemplateDoesNotExist(Exception): <class>'}, {'word': 'TemplateEncodingError', 'menu': '[I]', 'kind': 'c', 'abbr': 'TemplateEncodingError(Exception): <class>'}, {'word': 'TemplateSyntaxError', 'menu': '[I]', 'kind': 'c', 'abbr': 'TemplateSyntaxError(Exception): <class>'}, {'word': 'TextNode', 'menu': '[I]', 'kind': 'c', 'abbr': 'TextNode(Node): <class>'}, {'word': 'Token', 'menu': '[I]', 'kind': 'c', 'abbr': 'Token(object): <class>'}, {'word': 'TokenParser', 'menu': '[I]', 'kind': 'c', 'abbr': 'TokenParser(object): <class>'}, {'word': 'UNKNOWN_SOURCE', 'menu': '[I]', 'kind': 'v', 'abbr': 'UNKNOWN_SOURCE = ''<unknown source>'''}, {'word': 'VARIABLE_ATTRIBUTE_SEPARATOR', 'menu': '[I]', 'kind': 'v', 'abbr': 'VARIABLE_ATTRIBUTE_SEPARATOR = ''.'''}, {'word': 'VARIABLE_TAG_END', 'menu': '[I]', 'kind': 'v', 'abbr': 'VARIABLE_TAG_END = ''}}'''}, {'word': 'VARIABLE_TAG_START', 'menu': '[I]', 'kind': 'v', 'abbr': 'VARIABLE_TAG_START = ''{{'''}, {'word': 'Variable', 'menu': '[I]', 'kind': 'c', 'abbr': 'Variable(object): <class>'}, {'word': 'VariableDoesNotExist', 'menu': '[I]', 'kind': 'c', 'abbr': 'VariableDoesNotExist(Exception): <class>'}, {'word': 'VariableNode', 'menu': '[I]', 'kind': 'c', 'abbr': 'VariableNode(Node): <class>'}, {'word': '__init__', 'menu': 'Library.assignment_tag.dec.AssignmentNode', 'kind': 'm', 'abbr': 'def __init__(self, takes_context, args, kwargs, target_var):'}, {'word': '_render', 'menu': 'Template', 'kind': 'm', 'abbr': 'def _render(self, context):'}, {'word': '_resolve_lookup', 'menu': 'Variable', 'kind': 'm', 'abbr': 'def _resolve_lookup(self, context):'}, {'word': 'add_library', 'menu': 'Parser', 'kind': 'm', 'abbr': 'def add_library(self, lib):'}, {'word': 'add_to_builtins', 'menu': '[I]', 'kind': 'f', 'abbr': 'def add_to_builtins(module):'}, {'word': 'args_check', 'menu': 'FilterExpression', 'kind': 'v', 'abbr': 'args_check = staticmethod(args_check)'}, {'word': 'assignment_tag', 'menu': 'Library', 'kind': 'm', 'abbr': 'def assignment_tag(self, func=None, takes_context=None, name=None):'}, {'word': 'back', 'menu': 'TokenParser', 'kind': 'm', 'abbr': 'def back(self):'}, {'word': 'builtins', 'menu': '[I]', 'kind': 'v', 'abbr': 'builtins = []'}, {'word': 'child_nodelists', 'menu': 'Node', 'kind': 'v', 'abbr': 'child_nodelists = (''nodelist'',)'}, {'word': 'compile_filter', 'menu': 'Parser', 'kind': 'm', 'abbr': 'def compile_filter(self, token):'}, {'word': 'compile_filter_error', 'menu': 'Parser', 'kind': 'm', 'abbr': 'def compile_filter_error(self, token, e):'}, {'word': 'compile_func', 'menu': '[I]', 'kind': 'f', 'abbr': 'def compile_func(parser, token):'}, {'word': 'compile_function_error', 'menu': 'Parser', 'kind': 'm', 'abbr': 'def compile_function_error(self, token, e):'}, {'word': 'compile_string', 'menu': '[I]', 'kind': 'f', 'abbr': 'def compile_string(template_string, origin):'}, {'word': 'constant_string', 'menu': '[I]', 'kind': 'v', 'abbr': 'constant_string = constant_string.replace("\n", "")'}, {'word': 'contains_nontext', 'menu': 'NodeList', 'kind': 'v', 'abbr': 'contains_nontext = False'}, {'word': 'create_nodelist', 'menu': 'Parser', 'kind': 'm', 'abbr': 'def create_nodelist(self):'}, {'word': 'create_token', 'menu': 'Lexer', 'kind': 'm', 'abbr': 'def create_token(self, token_string, in_tag):'}, {'word': 'create_variable_node', 'menu': 'Parser', 'kind': 'm', 'abbr': 'def create_variable_node(self, filter_expression):'}, {'word': 'dec', 'menu': '[I]', 'kind': 'f', 'abbr': 'def dec(func):'}, {'word': 'delete_first_token', 'menu': 'Parser', 'kind': 'm', 'abbr': 'def delete_first_token(self):'}, {'word': 'empty_block_tag', 'menu': 'Parser', 'kind': 'm', 'abbr': 'def empty_block_tag(self, token):'}, {'word': 'empty_variable', 'menu': 'Parser', 'kind': 'm', 'abbr': 'def empty_variable(self, token):'}, {'word': 'enter_command', 'menu': 'Parser', 'kind': 'm', 'abbr': 'def enter_command(self, command, token):'}, {'word': 'error', 'menu': 'Parser', 'kind': 'm', 'abbr': 'def error(self, token, msg):'}, {'word': 'exit_command', 'menu': 'Parser', 'kind': 'm', 'abbr': 'def exit_command(self):'}, {'word': 'extend_nodelist', 'menu': 'Parser', 'kind': 'm', 'abbr': 'def extend_nodelist(self, nodelist, node, token):'}, {'word': 'filter', 'menu': 'Library', 'kind': 'm', 'abbr': 'def filter(self, name=None, filter_func=None, **flags):'}, {'word': 'filter_function', 'menu': 'Library', 'kind': 'm', 'abbr': 'def filter_function(self, func, **flags):'}, {'word': 'filter_re', 'menu': '[I]', 'kind': 'v', 'abbr': 'filter_re = re.compile(filter_raw_string, re.UNICODE | re.VERBOSE)'}, {'word': 'find_filter', 'menu': 'Parser', 'kind': 'm', 'abbr': 'def find_filter(self, filter_name):'}, {'word': 'generic_tag_compiler', 'menu': '[I]', 'kind': 'f', 'abbr': 'def generic_tag_compiler(parser, token, params, varargs, varkw, defaults,'}, {'word': 'get_library', 'menu': '[I]', 'kind': 'f', 'abbr': 'def get_library(library_name):'}, {'word': 'get_nodes_by_type', 'menu': 'Node', 'kind': 'm', 'abbr': 'def get_nodes_by_type(self, nodetype):'}, {'word': 'get_resolved_arguments', 'menu': 'TagHelperNode', 'kind': 'm', 'abbr': 'def get_resolved_arguments(self, context):'}, {'word': 'get_templatetags_modules', 'menu': '[I]', 'kind': 'f', 'abbr': 'def get_templatetags_modules():'}, {'word': 'import_library', 'menu': '[I]', 'kind': 'f', 'abbr': 'def import_library(taglib_module):'}, {'word': 'inclusion_tag', 'menu': 'Library', 'kind': 'm', 'abbr': 'def inclusion_tag(self, file_name, context_class=Context, takes_context=False, name=None):'}, {'word': 'invalid_block_tag', 'menu': 'Parser', 'kind': 'm', 'abbr': 'def invalid_block_tag(self, token, command, parse_until=None):'}, {'word': 'invalid_var_format_string', 'menu': '[I]', 'kind': 'v', 'abbr': 'invalid_var_format_string = None'}, {'word': 'is_library_missing', 'menu': '[I]', 'kind': 'f', 'abbr': 'def is_library_missing(name):'}, {'word': 'kwarg_re', 'menu': '[I]', 'kind': 'v', 'abbr': 'kwarg_re = re.compile(r"(?:(\w+)=)?(.+)")'}, {'word': 'libraries', 'menu': '[I]', 'kind': 'v', 'abbr': 'libraries = {}'}, {'word': 'more', 'menu': 'TokenParser', 'kind': 'm', 'abbr': 'def more(self):'}, {'word': 'must_be_first', 'menu': 'Node', 'kind': 'v', 'abbr': 'must_be_first = False'}, {'word': 'next_space_index', 'menu': '[I]', 'kind': 'f', 'abbr': 'def next_space_index(subject, i):'}, {'word': 'next_token', 'menu': 'Parser', 'kind': 'm', 'abbr': 'def next_token(self):'}, {'word': 'parse', 'menu': 'Parser', 'kind': 'm', 'abbr': 'def parse(self, parse_until=None):'}, {'word': 'parse_bits', 'menu': '[I]', 'kind': 'f', 'abbr': 'def parse_bits(parser, bits, params, varargs, varkw, defaults,'}, {'word': 'prepend_token', 'menu': 'Parser', 'kind': 'm', 'abbr': 'def prepend_token(self, token):'}, {'word': 'reload', 'menu': 'Origin', 'kind': 'm', 'abbr': 'def reload(self):'}, {'word': 'render', 'menu': 'Library.assignment_tag.dec.AssignmentNode', 'kind': 'm', 'abbr': 'def render(self, context):'}, {'word': 'render_node', 'menu': 'NodeList', 'kind': 'm', 'abbr': 'def render_node(self, node, context):'}, {'word': 'render_value_in_context', 'menu': '[I]', 'kind': 'f', 'abbr': 'def render_value_in_context(value, context):'}, {'word': 'resolve', 'menu': 'Variable', 'kind': 'm', 'abbr': 'def resolve(self, context):'}, {'word': 'resolve_variable', 'menu': '[I]', 'kind': 'f', 'abbr': 'def resolve_variable(path, context):'}, {'word': 'simple_tag', 'menu': 'Library', 'kind': 'm', 'abbr': 'def simple_tag(self, func=None, takes_context=None, name=None):'}, {'word': 'skip_past', 'menu': 'Parser', 'kind': 'm', 'abbr': 'def skip_past(self, endtag):'}, {'word': 'split_contents', 'menu': 'Token', 'kind': 'm', 'abbr': 'def split_contents(self):'}, {'word': 'tag', 'menu': 'TokenParser', 'kind': 'm', 'abbr': 'def tag(self):'}, {'word': 'tag_function', 'menu': 'Library', 'kind': 'm', 'abbr': 'def tag_function(self, func):'}, {'word': 'tag_re', 'menu': '[I]', 'kind': 'v', 'abbr': 'tag_re = (re.compile(''(%s.*?%s|%s.*?%s|%s.*?%s)'' %'}, {'word': 'templatetags_modules', 'menu': '[I]', 'kind': 'v', 'abbr': 'templatetags_modules = []'}, {'word': 'token_kwargs', 'menu': '[I]', 'kind': 'f', 'abbr': 'def token_kwargs(bits, parser, support_legacy=False):'}, {'word': 'tokenize', 'menu': 'Lexer', 'kind': 'm', 'abbr': 'def tokenize(self):'}, {'word': 'top', 'menu': 'TokenParser', 'kind': 'm', 'abbr': 'def top(self):'}, {'word': 'unclosed_block_tag', 'menu': 'Parser', 'kind': 'm', 'abbr': 'def unclosed_block_tag(self, parse_until):'}, {'word': 'value', 'menu': 'TokenParser', 'kind': 'm', 'abbr': 'def value(self):'}]
