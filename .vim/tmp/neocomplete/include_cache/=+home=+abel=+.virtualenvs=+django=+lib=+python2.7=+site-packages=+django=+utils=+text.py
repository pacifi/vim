[{'word': 'StreamingBuffer', 'menu': '[I]', 'kind': 'c', 'abbr': 'StreamingBuffer(object): <class>'}, {'word': 'Truncator', 'menu': '[I]', 'kind': 'c', 'abbr': 'Truncator(SimpleLazyObject): <class>'}, {'word': '__init__', 'menu': 'StreamingBuffer', 'kind': 'm', 'abbr': 'def __init__(self):'}, {'word': '_entity_re', 'menu': '[I]', 'kind': 'v', 'abbr': '_entity_re'}, {'word': '_generator', 'menu': '[I]', 'kind': 'f', 'abbr': 'def _generator():'}, {'word': '_html_words', 'menu': 'Truncator', 'kind': 'm', 'abbr': 'def _html_words(self, length, truncate):'}, {'word': '_replace_entity', 'menu': '[I]', 'kind': 'f', 'abbr': 'def _replace_entity(match):'}, {'word': '_text_words', 'menu': 'Truncator', 'kind': 'm', 'abbr': 'def _text_words(self, length, truncate):'}, {'word': 'add_truncation_text', 'menu': 'Truncator', 'kind': 'm', 'abbr': 'def add_truncation_text(self, text, truncate=None):'}, {'word': 'capfirst', 'menu': '[I]', 'kind': 'v', 'abbr': 'capfirst = allow_lazy(capfirst, six.text_type)'}, {'word': 'chars', 'menu': 'Truncator', 'kind': 'v', 'abbr': 'chars = allow_lazy(chars)'}, {'word': 'close', 'menu': 'StreamingBuffer', 'kind': 'm', 'abbr': 'def close(self):'}, {'word': 'compress_sequence', 'menu': '[I]', 'kind': 'f', 'abbr': 'def compress_sequence(sequence):'}, {'word': 'compress_string', 'menu': '[I]', 'kind': 'f', 'abbr': 'def compress_string(s):'}, {'word': 'fix', 'menu': '[I]', 'kind': 'f', 'abbr': 'def fix(match):'}, {'word': 'flush', 'menu': 'StreamingBuffer', 'kind': 'm', 'abbr': 'def flush(self):'}, {'word': 'get_text_list', 'menu': '[I]', 'kind': 'f', 'abbr': 'def get_text_list(list_, last_word=ugettext_lazy(''or'')):'}, {'word': 'get_valid_filename', 'menu': '[I]', 'kind': 'f', 'abbr': 'def get_valid_filename(s):'}, {'word': 'javascript_quote', 'menu': '[I]', 'kind': 'f', 'abbr': 'def javascript_quote(s, quote_double_quotes=False):'}, {'word': 'normalize_newlines', 'menu': '[I]', 'kind': 'f', 'abbr': 'def normalize_newlines(text):'}, {'word': 'phone2numeric', 'menu': '[I]', 'kind': 'f', 'abbr': 'phone2numeric'}, {'word': 're_tag', 'menu': '[I]', 'kind': 'v', 'abbr': 're_tag = re.compile(r''<(/)?([^ ]+?)(?:(\s*/)| .*?)?>'', re.S)'}, {'word': 're_words', 'menu': '[I]', 'kind': 'v', 'abbr': 're_words = re.compile(r''&.*?;|<.*?>|(\w[\w-]*)'', re.U|re.S)'}, {'word': 'read', 'menu': 'StreamingBuffer', 'kind': 'm', 'abbr': 'def read(self):'}, {'word': 'recapitalize', 'menu': '[I]', 'kind': 'f', 'abbr': 'def recapitalize(text):'}, {'word': 'slugify', 'menu': '[I]', 'kind': 'f', 'abbr': 'def slugify(value):'}, {'word': 'smart_split', 'menu': '[I]', 'kind': 'f', 'abbr': 'def smart_split(text):'}, {'word': 'unescape_entities', 'menu': '[I]', 'kind': 'f', 'abbr': 'def unescape_entities(text):'}, {'word': 'unescape_string_literal', 'menu': '[I]', 'kind': 'f', 'abbr': 'def unescape_string_literal(s):'}, {'word': 'ustring_re', 'menu': '[I]', 'kind': 'v', 'abbr': 'ustring_re'}, {'word': 'words', 'menu': 'Truncator', 'kind': 'm', 'abbr': 'def words(self, num, truncate=None, html=False):'}, {'word': 'wrap', 'menu': '[I]', 'kind': 'f', 'abbr': 'def wrap(text, width):'}, {'word': 'write', 'menu': 'StreamingBuffer', 'kind': 'm', 'abbr': 'def write(self, val):'}]
