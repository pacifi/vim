[{'word': 'BOM32_BE', 'menu': '[I]', 'kind': 'v', 'abbr': 'BOM32_BE'}, {'word': 'BOM32_LE', 'menu': '[I]', 'kind': 'v', 'abbr': 'BOM32_LE'}, {'word': 'BOM64_BE', 'menu': '[I]', 'kind': 'v', 'abbr': 'BOM64_BE'}, {'word': 'BOM64_LE', 'menu': '[I]', 'kind': 'v', 'abbr': 'BOM64_LE'}, {'word': 'BOM_UTF32', 'menu': '[I]', 'kind': 'v', 'abbr': 'BOM_UTF32'}, {'word': 'BOM_UTF32_BE', 'menu': '[I]', 'kind': 'v', 'abbr': 'BOM_UTF32_BE'}, {'word': 'BOM_UTF32_LE', 'menu': '[I]', 'kind': 'v', 'abbr': 'BOM_UTF32_LE'}, {'word': 'BOM_UTF8', 'menu': '[I]', 'kind': 'v', 'abbr': 'BOM_UTF8'}, {'word': 'BufferedIncrementalDecoder', 'menu': '[I]', 'kind': 'c', 'abbr': 'BufferedIncrementalDecoder(IncrementalDecoder): <class>'}, {'word': 'BufferedIncrementalEncoder', 'menu': '[I]', 'kind': 'c', 'abbr': 'BufferedIncrementalEncoder(IncrementalEncoder): <class>'}, {'word': 'Codec', 'menu': '[I]', 'kind': 'c', 'abbr': 'Codec: <class>'}, {'word': 'CodecInfo', 'menu': '[I]', 'kind': 'c', 'abbr': 'CodecInfo(tuple): <class>'}, {'word': 'EncodedFile', 'menu': '[I]', 'kind': 'f', 'abbr': 'def EncodedFile(file, data_encoding, file_encoding=None, errors=''strict''):'}, {'word': 'IncrementalDecoder', 'menu': '[I]', 'kind': 'c', 'abbr': 'IncrementalDecoder(object): <class>'}, {'word': 'IncrementalEncoder', 'menu': '[I]', 'kind': 'c', 'abbr': 'IncrementalEncoder(object): <class>'}, {'word': 'StreamReader', 'menu': '[I]', 'kind': 'c', 'abbr': 'StreamReader(Codec): <class>'}, {'word': 'StreamReaderWriter', 'menu': '[I]', 'kind': 'c', 'abbr': 'StreamReaderWriter: <class>'}, {'word': 'StreamRecoder', 'menu': '[I]', 'kind': 'c', 'abbr': 'StreamRecoder: <class>'}, {'word': 'StreamWriter', 'menu': '[I]', 'kind': 'c', 'abbr': 'StreamWriter(Codec): <class>'}, {'word': '__all__', 'menu': '[I]', 'kind': 'v', 'abbr': '__all__ = ["register", "lookup", "open", "EncodedFile", "BOM", "BOM_BE",'}, {'word': '__init__', 'menu': 'BufferedIncrementalDecoder', 'kind': 'm', 'abbr': 'def __init__(self, errors=''strict''):'}, {'word': '_buffer_decode', 'menu': 'BufferedIncrementalDecoder', 'kind': 'm', 'abbr': 'def _buffer_decode(self, input, errors, final):'}, {'word': '_buffer_encode', 'menu': 'BufferedIncrementalEncoder', 'kind': 'm', 'abbr': 'def _buffer_encode(self, input, errors, final):'}, {'word': '_false', 'menu': '[I]', 'kind': 'v', 'abbr': '_false'}, {'word': 'backslashreplace_errors', 'menu': '[I]', 'kind': 'v', 'abbr': 'backslashreplace_errors = None'}, {'word': 'data_encoding', 'menu': 'StreamRecoder', 'kind': 'v', 'abbr': 'data_encoding = ''unknown'''}, {'word': 'decode', 'menu': 'Codec', 'kind': 'm', 'abbr': 'def decode(self, input, errors=''strict''):'}, {'word': 'encode', 'menu': 'Codec', 'kind': 'm', 'abbr': 'def encode(self, input, errors=''strict''):'}, {'word': 'encoding', 'menu': 'StreamReaderWriter', 'kind': 'v', 'abbr': 'encoding = ''unknown'''}, {'word': 'file_encoding', 'menu': 'StreamRecoder', 'kind': 'v', 'abbr': 'file_encoding = ''unknown'''}, {'word': 'getdecoder', 'menu': '[I]', 'kind': 'f', 'abbr': 'def getdecoder(encoding):'}, {'word': 'getencoder', 'menu': '[I]', 'kind': 'f', 'abbr': 'def getencoder(encoding):'}, {'word': 'getincrementaldecoder', 'menu': '[I]', 'kind': 'f', 'abbr': 'def getincrementaldecoder(encoding):'}, {'word': 'getincrementalencoder', 'menu': '[I]', 'kind': 'f', 'abbr': 'def getincrementalencoder(encoding):'}, {'word': 'getreader', 'menu': '[I]', 'kind': 'f', 'abbr': 'def getreader(encoding):'}, {'word': 'getstate', 'menu': 'BufferedIncrementalDecoder', 'kind': 'm', 'abbr': 'def getstate(self):'}, {'word': 'getwriter', 'menu': '[I]', 'kind': 'f', 'abbr': 'def getwriter(encoding):'}, {'word': 'ignore_errors', 'menu': '[I]', 'kind': 'v', 'abbr': 'ignore_errors = None'}, {'word': 'iterdecode', 'menu': '[I]', 'kind': 'f', 'abbr': 'def iterdecode(iterator, encoding, errors=''strict'', **kwargs):'}, {'word': 'iterencode', 'menu': '[I]', 'kind': 'f', 'abbr': 'def iterencode(iterator, encoding, errors=''strict'', **kwargs):'}, {'word': 'make_encoding_map', 'menu': '[I]', 'kind': 'f', 'abbr': 'def make_encoding_map(decoding_map):'}, {'word': 'make_identity_dict', 'menu': '[I]', 'kind': 'f', 'abbr': 'def make_identity_dict(rng):'}, {'word': 'next', 'menu': 'StreamReader', 'kind': 'm', 'abbr': 'def next(self):'}, {'word': 'open', 'menu': '[I]', 'kind': 'f', 'abbr': 'open'}, {'word': 'read', 'menu': 'StreamReaderWriter', 'kind': 'm', 'abbr': 'read'}, {'word': 'readline', 'menu': 'StreamReaderWriter', 'kind': 'm', 'abbr': 'def readline(self, size=None):'}, {'word': 'readlines', 'menu': 'StreamReaderWriter', 'kind': 'm', 'abbr': 'def readlines(self, sizehint=None):'}, {'word': 'replace_errors', 'menu': '[I]', 'kind': 'v', 'abbr': 'replace_errors = None'}, {'word': 'reset', 'menu': 'BufferedIncrementalDecoder', 'kind': 'm', 'abbr': 'def reset(self):'}, {'word': 'seek', 'menu': 'StreamReader', 'kind': 'm', 'abbr': 'seek'}, {'word': 'setstate', 'menu': 'BufferedIncrementalDecoder', 'kind': 'm', 'abbr': 'def setstate(self, state):'}, {'word': 'strict_errors', 'menu': '[I]', 'kind': 'v', 'abbr': 'strict_errors = None'}, {'word': 'write', 'menu': 'StreamReaderWriter', 'kind': 'm', 'abbr': 'def write(self, data):'}, {'word': 'writelines', 'menu': 'StreamReaderWriter', 'kind': 'm', 'abbr': 'def writelines(self, list):'}, {'word': 'xmlcharrefreplace_errors', 'menu': '[I]', 'kind': 'v', 'abbr': 'xmlcharrefreplace_errors = None'}]
