[{'word': 'BPF', 'menu': '[I]', 'kind': 'v', 'abbr': 'BPF'}, {'word': 'LOG4', 'menu': '[I]', 'kind': 'v', 'abbr': 'LOG4'}, {'word': 'NV_MAGICCONST', 'menu': '[I]', 'kind': 'v', 'abbr': 'NV_MAGICCONST'}, {'word': 'RECIP_BPF', 'menu': '[I]', 'kind': 'v', 'abbr': 'RECIP_BPF'}, {'word': 'Random', 'menu': '[I]', 'kind': 'c', 'abbr': 'Random(_random.Random): <class>'}, {'word': 'SG_MAGICCONST', 'menu': '[I]', 'kind': 'v', 'abbr': 'SG_MAGICCONST'}, {'word': 'SystemRandom', 'menu': '[I]', 'kind': 'c', 'abbr': 'SystemRandom(Random): <class>'}, {'word': 'TWOPI', 'menu': '[I]', 'kind': 'v', 'abbr': 'TWOPI'}, {'word': 'VERSION', 'menu': 'WichmannHill', 'kind': 'v', 'abbr': 'VERSION'}, {'word': 'WichmannHill', 'menu': '[I]', 'kind': 'c', 'abbr': 'WichmannHill(Random): <class>'}, {'word': '__all__', 'menu': '[I]', 'kind': 'v', 'abbr': '__all__ = ["Random","seed","random","uniform","randint","choice","sample",'}, {'word': '__init__', 'menu': 'Random', 'kind': 'm', 'abbr': 'def __init__(self, x=None):'}, {'word': '_inst', 'menu': '[I]', 'kind': 'v', 'abbr': '_inst = Random()'}, {'word': '_notimplemented', 'menu': 'SystemRandom', 'kind': 'm', 'abbr': 'def _notimplemented(self, *args, **kwds):'}, {'word': '_randbelow', 'menu': 'Random', 'kind': 'm', 'abbr': '_randbelow'}, {'word': '_stub', 'menu': 'SystemRandom', 'kind': 'm', 'abbr': 'def _stub(self, *args, **kwds):'}, {'word': '_test', 'menu': '[I]', 'kind': 'f', 'abbr': '_test'}, {'word': '_test_generator', 'menu': '[I]', 'kind': 'f', 'abbr': 'def _test_generator(n, func, args):'}, {'word': 'betavariate', 'menu': 'Random', 'kind': 'm', 'abbr': 'def betavariate(self, alpha, beta):'}, {'word': 'choice', 'menu': 'Random', 'kind': 'm', 'abbr': 'def choice(self, seq):'}, {'word': 'expovariate', 'menu': 'Random', 'kind': 'm', 'abbr': 'def expovariate(self, lambd):'}, {'word': 'gammavariate', 'menu': 'Random', 'kind': 'm', 'abbr': 'def gammavariate(self, alpha, beta):'}, {'word': 'gauss', 'menu': 'Random', 'kind': 'm', 'abbr': 'def gauss(self, mu, sigma):'}, {'word': 'getrandbits', 'menu': 'SystemRandom', 'kind': 'm', 'abbr': 'def getrandbits(self, k):'}, {'word': 'getstate', 'menu': 'Random', 'kind': 'm', 'abbr': 'def getstate(self):'}, {'word': 'jumpahead', 'menu': 'Random', 'kind': 'm', 'abbr': 'def jumpahead(self, n):'}, {'word': 'lognormvariate', 'menu': 'Random', 'kind': 'm', 'abbr': 'def lognormvariate(self, mu, sigma):'}, {'word': 'normalvariate', 'menu': 'Random', 'kind': 'm', 'abbr': 'def normalvariate(self, mu, sigma):'}, {'word': 'paretovariate', 'menu': 'Random', 'kind': 'm', 'abbr': 'def paretovariate(self, alpha):'}, {'word': 'randint', 'menu': 'Random', 'kind': 'm', 'abbr': 'def randint(self, a, b):'}, {'word': 'random', 'menu': 'SystemRandom', 'kind': 'm', 'abbr': 'def random(self):'}, {'word': 'randrange', 'menu': 'Random', 'kind': 'm', 'abbr': 'randrange'}, {'word': 'sample', 'menu': 'Random', 'kind': 'm', 'abbr': 'def sample(self, population, k):'}, {'word': 'seed', 'menu': 'Random', 'kind': 'm', 'abbr': 'def seed(self, a=None):'}, {'word': 'setstate', 'menu': 'Random', 'kind': 'm', 'abbr': 'def setstate(self, state):'}, {'word': 'shuffle', 'menu': 'Random', 'kind': 'm', 'abbr': 'def shuffle(self, x, random=None):'}, {'word': 'triangular', 'menu': 'Random', 'kind': 'm', 'abbr': 'triangular'}, {'word': 'uniform', 'menu': 'Random', 'kind': 'm', 'abbr': 'def uniform(self, a, b):'}, {'word': 'vonmisesvariate', 'menu': 'Random', 'kind': 'm', 'abbr': 'def vonmisesvariate(self, mu, kappa):'}, {'word': 'weibullvariate', 'menu': 'Random', 'kind': 'm', 'abbr': 'def weibullvariate(self, alpha, beta):'}, {'word': 'whseed', 'menu': 'WichmannHill', 'kind': 'm', 'abbr': 'def whseed(self, a=None):'}]
