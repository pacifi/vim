[{'word': 'BasicContext', 'menu': '[I]', 'kind': 'v', 'abbr': 'BasicContext = Context('}, {'word': 'Clamped', 'menu': '[I]', 'kind': 'c', 'abbr': 'Clamped(DecimalException): <class>'}, {'word': 'Context', 'menu': '[I]', 'kind': 'c', 'abbr': 'Context(object): <class>'}, {'word': 'ConversionSyntax', 'menu': '[I]', 'kind': 'c', 'abbr': 'ConversionSyntax(InvalidOperation): <class>'}, {'word': 'Decimal', 'menu': '[I]', 'kind': 'c', 'abbr': 'Decimal(object): <class>'}, {'word': 'DecimalException', 'menu': '[I]', 'kind': 'c', 'abbr': 'DecimalException(ArithmeticError): <class>'}, {'word': 'DecimalTuple', 'menu': '[I]', 'kind': 'v', 'abbr': 'DecimalTuple = _namedtuple(''DecimalTuple'', ''sign digits exponent'')'}, {'word': 'DefaultContext', 'menu': '[I]', 'kind': 'v', 'abbr': 'DefaultContext = Context('}, {'word': 'DivisionByZero', 'menu': '[I]', 'kind': 'c', 'abbr': 'DivisionByZero(DecimalException, ZeroDivisionError): <class>'}, {'word': 'DivisionImpossible', 'menu': '[I]', 'kind': 'c', 'abbr': 'DivisionImpossible(InvalidOperation): <class>'}, {'word': 'DivisionUndefined', 'menu': '[I]', 'kind': 'c', 'abbr': 'DivisionUndefined(InvalidOperation, ZeroDivisionError): <class>'}, {'word': 'Etiny', 'menu': 'Context', 'kind': 'm', 'abbr': 'def Etiny(self):'}, {'word': 'Etop', 'menu': 'Context', 'kind': 'm', 'abbr': 'def Etop(self):'}, {'word': 'ExtendedContext', 'menu': '[I]', 'kind': 'v', 'abbr': 'ExtendedContext = Context('}, {'word': 'Inexact', 'menu': '[I]', 'kind': 'c', 'abbr': 'Inexact(DecimalException): <class>'}, {'word': 'InvalidContext', 'menu': '[I]', 'kind': 'c', 'abbr': 'InvalidContext(InvalidOperation): <class>'}, {'word': 'InvalidOperation', 'menu': '[I]', 'kind': 'c', 'abbr': 'InvalidOperation(DecimalException): <class>'}, {'word': 'MockThreading', 'menu': 'Underflow', 'kind': 'c', 'abbr': 'MockThreading(object): <class>'}, {'word': 'Overflow', 'menu': '[I]', 'kind': 'c', 'abbr': 'Overflow(Inexact, Rounded): <class>'}, {'word': 'ROUND_05UP', 'menu': '[I]', 'kind': 'v', 'abbr': 'ROUND_05UP'}, {'word': 'ROUND_CEILING', 'menu': '[I]', 'kind': 'v', 'abbr': 'ROUND_CEILING = ''ROUND_CEILING'''}, {'word': 'ROUND_DOWN', 'menu': '[I]', 'kind': 'v', 'abbr': 'ROUND_DOWN = ''ROUND_DOWN'''}, {'word': 'ROUND_FLOOR', 'menu': '[I]', 'kind': 'v', 'abbr': 'ROUND_FLOOR = ''ROUND_FLOOR'''}, {'word': 'ROUND_HALF_DOWN', 'menu': '[I]', 'kind': 'v', 'abbr': 'ROUND_HALF_DOWN = ''ROUND_HALF_DOWN'''}, {'word': 'ROUND_HALF_EVEN', 'menu': '[I]', 'kind': 'v', 'abbr': 'ROUND_HALF_EVEN = ''ROUND_HALF_EVEN'''}, {'word': 'ROUND_HALF_UP', 'menu': '[I]', 'kind': 'v', 'abbr': 'ROUND_HALF_UP = ''ROUND_HALF_UP'''}, {'word': 'ROUND_UP', 'menu': '[I]', 'kind': 'v', 'abbr': 'ROUND_UP = ''ROUND_UP'''}, {'word': 'Rounded', 'menu': '[I]', 'kind': 'c', 'abbr': 'Rounded(DecimalException): <class>'}, {'word': 'Subnormal', 'menu': '[I]', 'kind': 'c', 'abbr': 'Subnormal(DecimalException): <class>'}, {'word': 'Underflow', 'menu': '[I]', 'kind': 'c', 'abbr': 'Underflow(Inexact, Rounded, Subnormal): <class>'}, {'word': '_ContextManager', 'menu': '[I]', 'kind': 'c', 'abbr': '_ContextManager(object): <class>'}, {'word': '_Infinity', 'menu': '[I]', 'kind': 'v', 'abbr': '_Infinity = Decimal(''Inf'')'}, {'word': '_Log10Memoize', 'menu': '[I]', 'kind': 'c', 'abbr': '_Log10Memoize'}, {'word': '_NaN', 'menu': '[I]', 'kind': 'v', 'abbr': '_NaN = Decimal(''NaN'')'}, {'word': '_NegativeInfinity', 'menu': '[I]', 'kind': 'v', 'abbr': '_NegativeInfinity = Decimal(''-Inf'')'}, {'word': '_NegativeOne', 'menu': '[I]', 'kind': 'v', 'abbr': '_NegativeOne'}, {'word': '_One', 'menu': '[I]', 'kind': 'v', 'abbr': '_One'}, {'word': '_SignedInfinity', 'menu': '[I]', 'kind': 'v', 'abbr': '_SignedInfinity = (_Infinity, _NegativeInfinity)'}, {'word': '_WorkRep', 'menu': '[I]', 'kind': 'c', 'abbr': '_WorkRep(object): <class>'}, {'word': '_Zero', 'menu': '[I]', 'kind': 'v', 'abbr': '_Zero'}, {'word': '__all__', 'menu': '[I]', 'kind': 'v', 'abbr': '__all__ = ['}, {'word': '__copy__', 'menu': 'Context', 'kind': 'v', 'abbr': '__copy__ = copy'}, {'word': '__div__', 'menu': 'Decimal', 'kind': 'v', 'abbr': '__div__ = __truediv__'}, {'word': '__hash__', 'menu': 'Context', 'kind': 'v', 'abbr': '__hash__ = None'}, {'word': '__init__', 'menu': '_Log10Memoize', 'kind': 'm', 'abbr': 'def __init__(self):'}, {'word': '__radd__', 'menu': 'Decimal', 'kind': 'v', 'abbr': '__radd__ = __add__'}, {'word': '__rdiv__', 'menu': 'Decimal', 'kind': 'v', 'abbr': '__rdiv__ = __rtruediv__'}, {'word': '__rmul__', 'menu': 'Decimal', 'kind': 'v', 'abbr': '__rmul__ = __mul__'}, {'word': '__slots__', 'menu': 'Decimal', 'kind': 'v', 'abbr': '__slots__ = (''_exp'',''_int'',''_sign'', ''_is_special'')'}, {'word': '__str__', 'menu': '_WorkRep', 'kind': 'v', 'abbr': '__str__ = __repr__'}, {'word': '__trunc__', 'menu': 'Decimal', 'kind': 'v', 'abbr': '__trunc__ = __int__'}, {'word': '__version__', 'menu': '[I]', 'kind': 'v', 'abbr': '__version__'}, {'word': '_all_zeros', 'menu': '[I]', 'kind': 'v', 'abbr': '_all_zeros'}, {'word': '_apply', 'menu': 'Context', 'kind': 'm', 'abbr': 'def _apply(self, a):'}, {'word': '_check_nans', 'menu': 'Decimal', 'kind': 'm', 'abbr': 'def _check_nans(self, other=None, context=None):'}, {'word': '_cmp', 'menu': 'Decimal', 'kind': 'm', 'abbr': 'def _cmp(self, other):'}, {'word': '_compare_check_nans', 'menu': 'Decimal', 'kind': 'm', 'abbr': 'def _compare_check_nans(self, other, context):'}, {'word': '_condition_map', 'menu': '[I]', 'kind': 'v', 'abbr': '_condition_map = {ConversionSyntax:InvalidOperation,'}, {'word': '_convert_other', 'menu': '[I]', 'kind': 'f', 'abbr': 'def _convert_other(other, raiseit=False, allow_float=False):'}, {'word': '_dec_from_triple', 'menu': '[I]', 'kind': 'f', 'abbr': 'def _dec_from_triple(sign, coefficient, exponent, special=False):'}, {'word': '_decimal_lshift_exact', 'menu': '[I]', 'kind': 'f', 'abbr': 'def _decimal_lshift_exact(n, e):'}, {'word': '_dexp', 'menu': '[I]', 'kind': 'f', 'abbr': 'def _dexp(c, e, p):'}, {'word': '_div_nearest', 'menu': '[I]', 'kind': 'f', 'abbr': 'def _div_nearest(a, b):'}, {'word': '_divide', 'menu': 'Decimal', 'kind': 'm', 'abbr': 'def _divide(self, other, context):'}, {'word': '_dlog', 'menu': '[I]', 'kind': 'f', 'abbr': 'def _dlog(c, e, p):'}, {'word': '_dlog10', 'menu': '[I]', 'kind': 'f', 'abbr': '_dlog10'}, {'word': '_dpower', 'menu': '[I]', 'kind': 'f', 'abbr': 'def _dpower(xc, xe, yc, ye, p):'}, {'word': '_exact_half', 'menu': '[I]', 'kind': 'v', 'abbr': '_exact_half'}, {'word': '_fill_logical', 'menu': 'Decimal', 'kind': 'm', 'abbr': 'def _fill_logical(self, context, opa, opb):'}, {'word': '_fix', 'menu': 'Decimal', 'kind': 'm', 'abbr': 'def _fix(self, context):'}, {'word': '_fix_nan', 'menu': 'Decimal', 'kind': 'm', 'abbr': 'def _fix_nan(self, context):'}, {'word': '_format_align', 'menu': '[I]', 'kind': 'f', 'abbr': 'def _format_align(sign, body, spec):'}, {'word': '_format_number', 'menu': '[I]', 'kind': 'f', 'abbr': 'def _format_number(is_negative, intpart, fracpart, exp, spec):'}, {'word': '_format_sign', 'menu': '[I]', 'kind': 'f', 'abbr': 'def _format_sign(is_negative, spec):'}, {'word': '_group_lengths', 'menu': '[I]', 'kind': 'f', 'abbr': 'def _group_lengths(grouping):'}, {'word': '_iexp', 'menu': '[I]', 'kind': 'f', 'abbr': '_iexp'}, {'word': '_ignore_all_flags', 'menu': 'Context', 'kind': 'm', 'abbr': 'def _ignore_all_flags(self):'}, {'word': '_ignore_flags', 'menu': 'Context', 'kind': 'm', 'abbr': 'def _ignore_flags(self, *flags):'}, {'word': '_ilog', 'menu': '[I]', 'kind': 'f', 'abbr': '_ilog'}, {'word': '_insert_thousands_sep', 'menu': '[I]', 'kind': 'f', 'abbr': '_insert_thousands_sep'}, {'word': '_iseven', 'menu': 'Decimal', 'kind': 'm', 'abbr': 'def _iseven(self):'}, {'word': '_isinfinity', 'menu': 'Decimal', 'kind': 'm', 'abbr': 'def _isinfinity(self):'}, {'word': '_isinteger', 'menu': 'Decimal', 'kind': 'm', 'abbr': 'def _isinteger(self):'}, {'word': '_islogical', 'menu': 'Decimal', 'kind': 'm', 'abbr': 'def _islogical(self):'}, {'word': '_isnan', 'menu': 'Decimal', 'kind': 'm', 'abbr': 'def _isnan(self):'}, {'word': '_ln_exp_bound', 'menu': 'Decimal', 'kind': 'm', 'abbr': 'def _ln_exp_bound(self):'}, {'word': '_log10_digits', 'menu': '[I]', 'kind': 'v', 'abbr': '_log10_digits'}, {'word': '_log10_exp_bound', 'menu': 'Decimal', 'kind': 'm', 'abbr': '_log10_exp_bound'}, {'word': '_log10_lb', 'menu': '[I]', 'kind': 'f', 'abbr': '_log10_lb'}, {'word': '_nbits', 'menu': '[I]', 'kind': 'f', 'abbr': 'def _nbits(n, correction = {'}, {'word': '_normalize', 'menu': '[I]', 'kind': 'f', 'abbr': '_normalize'}, {'word': '_parse_format_specifier', 'menu': '[I]', 'kind': 'f', 'abbr': 'def _parse_format_specifier(format_spec, _localeconv=None):'}, {'word': '_pick_rounding_function', 'menu': 'Decimal', 'kind': 'v', 'abbr': '_pick_rounding_function = dict('}, {'word': '_power_exact', 'menu': 'Decimal', 'kind': 'm', 'abbr': 'def _power_exact(self, other, p):'}, {'word': '_power_modulo', 'menu': 'Decimal', 'kind': 'm', 'abbr': 'def _power_modulo(self, other, modulo, context=None):'}, {'word': '_raise_error', 'menu': 'Context', 'kind': 'm', 'abbr': 'def _raise_error(self, condition, explanation = None, *args):'}, {'word': '_regard_flags', 'menu': 'Context', 'kind': 'm', 'abbr': 'def _regard_flags(self, *flags):'}, {'word': '_rescale', 'menu': 'Decimal', 'kind': 'm', 'abbr': 'def _rescale(self, exp, rounding):'}, {'word': '_round', 'menu': 'Decimal', 'kind': 'm', 'abbr': 'def _round(self, places, rounding):'}, {'word': '_round_05up', 'menu': 'Decimal', 'kind': 'm', 'abbr': '_round_05up'}, {'word': '_round_ceiling', 'menu': 'Decimal', 'kind': 'm', 'abbr': 'def _round_ceiling(self, prec):'}, {'word': '_round_down', 'menu': 'Decimal', 'kind': 'm', 'abbr': 'def _round_down(self, prec):'}, {'word': '_round_floor', 'menu': 'Decimal', 'kind': 'm', 'abbr': 'def _round_floor(self, prec):'}, {'word': '_round_half_down', 'menu': 'Decimal', 'kind': 'm', 'abbr': 'def _round_half_down(self, prec):'}, {'word': '_round_half_even', 'menu': 'Decimal', 'kind': 'm', 'abbr': 'def _round_half_even(self, prec):'}, {'word': '_round_half_up', 'menu': 'Decimal', 'kind': 'm', 'abbr': 'def _round_half_up(self, prec):'}, {'word': '_round_up', 'menu': 'Decimal', 'kind': 'm', 'abbr': 'def _round_up(self, prec):'}, {'word': '_rshift_nearest', 'menu': '[I]', 'kind': 'f', 'abbr': 'def _rshift_nearest(x, shift):'}, {'word': '_set_rounding', 'menu': 'Context', 'kind': 'm', 'abbr': 'def _set_rounding(self, type):'}, {'word': '_shallow_copy', 'menu': 'Context', 'kind': 'm', 'abbr': 'def _shallow_copy(self):'}, {'word': '_signals', 'menu': '[I]', 'kind': 'v', 'abbr': '_signals = [Clamped, DivisionByZero, Inexact, Overflow, Rounded,'}, {'word': '_sqrt_nearest', 'menu': '[I]', 'kind': 'f', 'abbr': 'def _sqrt_nearest(n, a):'}, {'word': 'abs', 'menu': 'Context', 'kind': 'm', 'abbr': 'def abs(self, a):'}, {'word': 'add', 'menu': 'Context', 'kind': 'm', 'abbr': 'def add(self, a, b):'}, {'word': 'adjusted', 'menu': 'Decimal', 'kind': 'm', 'abbr': 'def adjusted(self):'}, {'word': 'as_tuple', 'menu': 'Decimal', 'kind': 'm', 'abbr': 'def as_tuple(self):'}, {'word': 'canonical', 'menu': 'Context', 'kind': 'm', 'abbr': 'def canonical(self, a):'}, {'word': 'clear_flags', 'menu': 'Context', 'kind': 'm', 'abbr': 'def clear_flags(self):'}, {'word': 'compare', 'menu': 'Context', 'kind': 'm', 'abbr': 'def compare(self, a, b):'}, {'word': 'compare_signal', 'menu': 'Context', 'kind': 'm', 'abbr': 'def compare_signal(self, a, b):'}, {'word': 'compare_total', 'menu': 'Context', 'kind': 'm', 'abbr': 'def compare_total(self, a, b):'}, {'word': 'compare_total_mag', 'menu': 'Context', 'kind': 'm', 'abbr': 'def compare_total_mag(self, a, b):'}, {'word': 'conjugate', 'menu': 'Decimal', 'kind': 'm', 'abbr': 'def conjugate(self):'}, {'word': 'copy', 'menu': 'Context', 'kind': 'm', 'abbr': 'def copy(self):'}, {'word': 'copy_abs', 'menu': 'Decimal', 'kind': 'm', 'abbr': 'def copy_abs(self):'}, {'word': 'copy_decimal', 'menu': 'Context', 'kind': 'm', 'abbr': 'def copy_decimal(self, a):'}, {'word': 'copy_negate', 'menu': 'Decimal', 'kind': 'm', 'abbr': 'def copy_negate(self):'}, {'word': 'copy_sign', 'menu': 'Context', 'kind': 'm', 'abbr': 'def copy_sign(self, a, b):'}, {'word': 'create_decimal', 'menu': 'Context', 'kind': 'm', 'abbr': 'create_decimal'}, {'word': 'create_decimal_from_float', 'menu': 'Context', 'kind': 'm', 'abbr': 'def create_decimal_from_float(self, f):'}, {'word': 'divide', 'menu': 'Context', 'kind': 'm', 'abbr': 'def divide(self, a, b):'}, {'word': 'divide_int', 'menu': 'Context', 'kind': 'm', 'abbr': 'def divide_int(self, a, b):'}, {'word': 'divmod', 'menu': 'Context', 'kind': 'm', 'abbr': 'def divmod(self, a, b):'}, {'word': 'exp', 'menu': 'Context', 'kind': 'm', 'abbr': 'def exp(self, a):'}, {'word': 'flags', 'menu': '[I]', 'kind': 'v', 'abbr': 'flags=[],'}, {'word': 'fma', 'menu': 'Context', 'kind': 'm', 'abbr': 'def fma(self, a, b, c):'}, {'word': 'from_float', 'menu': 'Decimal', 'kind': 'm', 'abbr': 'def from_float(cls, f):'}, {'word': 'getcontext', 'menu': '[I]', 'kind': 'f', 'abbr': 'def getcontext():'}, {'word': 'getdigits', 'menu': '_Log10Memoize', 'kind': 'm', 'abbr': 'def getdigits(self, p):'}, {'word': 'handle', 'menu': 'ConversionSyntax', 'kind': 'm', 'abbr': 'def handle(self, context, *args):'}, {'word': 'imag', 'menu': 'Decimal', 'kind': 'm', 'abbr': 'def imag(self):'}, {'word': 'is_canonical', 'menu': 'Decimal', 'kind': 'm', 'abbr': 'def is_canonical(self):'}, {'word': 'is_finite', 'menu': 'Decimal', 'kind': 'm', 'abbr': 'def is_finite(self):'}, {'word': 'is_infinite', 'menu': 'Decimal', 'kind': 'm', 'abbr': 'def is_infinite(self):'}, {'word': 'is_nan', 'menu': 'Decimal', 'kind': 'm', 'abbr': 'def is_nan(self):'}, {'word': 'is_normal', 'menu': 'Context', 'kind': 'm', 'abbr': 'def is_normal(self, a):'}, {'word': 'is_qnan', 'menu': 'Decimal', 'kind': 'm', 'abbr': 'def is_qnan(self):'}, {'word': 'is_signed', 'menu': 'Decimal', 'kind': 'm', 'abbr': 'def is_signed(self):'}, {'word': 'is_snan', 'menu': 'Decimal', 'kind': 'm', 'abbr': 'def is_snan(self):'}, {'word': 'is_subnormal', 'menu': 'Context', 'kind': 'm', 'abbr': 'def is_subnormal(self, a):'}, {'word': 'is_zero', 'menu': 'Decimal', 'kind': 'm', 'abbr': 'def is_zero(self):'}, {'word': 'ln', 'menu': 'Context', 'kind': 'm', 'abbr': 'def ln(self, a):'}, {'word': 'local', 'menu': 'Underflow.MockThreading', 'kind': 'm', 'abbr': 'def local(self, sys=sys):'}, {'word': 'localcontext', 'menu': '[I]', 'kind': 'f', 'abbr': 'def localcontext(ctx=None):'}, {'word': 'log10', 'menu': 'Context', 'kind': 'm', 'abbr': 'log10'}, {'word': 'logb', 'menu': 'Context', 'kind': 'm', 'abbr': 'def logb(self, a):'}, {'word': 'logical_and', 'menu': 'Context', 'kind': 'm', 'abbr': 'def logical_and(self, a, b):'}, {'word': 'logical_invert', 'menu': 'Context', 'kind': 'm', 'abbr': 'def logical_invert(self, a):'}, {'word': 'logical_or', 'menu': 'Context', 'kind': 'm', 'abbr': 'def logical_or(self, a, b):'}, {'word': 'logical_xor', 'menu': 'Context', 'kind': 'm', 'abbr': 'def logical_xor(self, a, b):'}, {'word': 'max', 'menu': 'Context', 'kind': 'm', 'abbr': 'def max(self, a, b):'}, {'word': 'max_mag', 'menu': 'Context', 'kind': 'm', 'abbr': 'def max_mag(self, a, b):'}, {'word': 'min', 'menu': 'Context', 'kind': 'm', 'abbr': 'def min(self, a, b):'}, {'word': 'min_mag', 'menu': 'Context', 'kind': 'm', 'abbr': 'def min_mag(self, a, b):'}, {'word': 'minus', 'menu': 'Context', 'kind': 'm', 'abbr': 'def minus(self, a):'}, {'word': 'multiply', 'menu': 'Context', 'kind': 'm', 'abbr': 'def multiply(self, a, b):'}, {'word': 'next_minus', 'menu': 'Context', 'kind': 'm', 'abbr': 'def next_minus(self, a):'}, {'word': 'next_plus', 'menu': 'Context', 'kind': 'm', 'abbr': 'def next_plus(self, a):'}, {'word': 'next_toward', 'menu': 'Context', 'kind': 'm', 'abbr': 'def next_toward(self, a, b):'}, {'word': 'normalize', 'menu': 'Context', 'kind': 'm', 'abbr': 'def normalize(self, a):'}, {'word': 'number_class', 'menu': 'Context', 'kind': 'm', 'abbr': 'def number_class(self, a):'}, {'word': 'plus', 'menu': 'Context', 'kind': 'm', 'abbr': 'def plus(self, a):'}, {'word': 'power', 'menu': 'Context', 'kind': 'm', 'abbr': 'def power(self, a, b, modulo=None):'}, {'word': 'quantize', 'menu': 'Context', 'kind': 'm', 'abbr': 'def quantize(self, a, b):'}, {'word': 'radix', 'menu': 'Context', 'kind': 'm', 'abbr': 'def radix(self):'}, {'word': 'real', 'menu': 'Decimal', 'kind': 'm', 'abbr': 'def real(self):'}, {'word': 'remainder', 'menu': 'Context', 'kind': 'm', 'abbr': 'def remainder(self, a, b):'}, {'word': 'remainder_near', 'menu': 'Context', 'kind': 'm', 'abbr': 'def remainder_near(self, a, b):'}, {'word': 'rotate', 'menu': 'Context', 'kind': 'm', 'abbr': 'def rotate(self, a, b):'}, {'word': 'same_quantum', 'menu': 'Context', 'kind': 'm', 'abbr': 'def same_quantum(self, a, b):'}, {'word': 'scaleb', 'menu': 'Context', 'kind': 'm', 'abbr': 'def scaleb (self, a, b):'}, {'word': 'setcontext', 'menu': '[I]', 'kind': 'f', 'abbr': 'def setcontext(context):'}, {'word': 'shift', 'menu': 'Context', 'kind': 'm', 'abbr': 'def shift(self, a, b):'}, {'word': 'sqrt', 'menu': 'Context', 'kind': 'm', 'abbr': 'def sqrt(self, a):'}, {'word': 'subtract', 'menu': 'Context', 'kind': 'm', 'abbr': 'def subtract(self, a, b):'}, {'word': 'threading', 'menu': 'Underflow', 'kind': 'v', 'abbr': 'threading = MockThreading()'}, {'word': 'to_eng_string', 'menu': 'Context', 'kind': 'm', 'abbr': 'def to_eng_string(self, a):'}, {'word': 'to_integral', 'menu': 'Context', 'kind': 'v', 'abbr': 'to_integral = to_integral_value'}, {'word': 'to_integral_exact', 'menu': 'Context', 'kind': 'm', 'abbr': 'def to_integral_exact(self, a):'}, {'word': 'to_integral_value', 'menu': 'Context', 'kind': 'm', 'abbr': 'def to_integral_value(self, a):'}, {'word': 'to_sci_string', 'menu': 'Context', 'kind': 'm', 'abbr': 'def to_sci_string(self, a):'}, {'word': 'traps', 'menu': '[I]', 'kind': 'v', 'abbr': 'traps=[DivisionByZero, Overflow, InvalidOperation, Clamped, Underflow],'}]
