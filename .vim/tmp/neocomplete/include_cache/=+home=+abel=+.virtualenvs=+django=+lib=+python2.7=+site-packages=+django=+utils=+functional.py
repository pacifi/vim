[{'word': 'LazyObject', 'menu': '[I]', 'kind': 'c', 'abbr': 'LazyObject(object): <class>'}, {'word': 'Promise', 'menu': '[I]', 'kind': 'c', 'abbr': 'Promise(object): <class>'}, {'word': 'SimpleLazyObject', 'menu': '[I]', 'kind': 'c', 'abbr': 'SimpleLazyObject(LazyObject): <class>'}, {'word': '__bool__', 'menu': 'SimpleLazyObject', 'kind': 'v', 'abbr': '__bool__'}, {'word': '__class__', 'menu': 'SimpleLazyObject', 'kind': 'v', 'abbr': '__class__ = property(new_method_proxy(operator.attrgetter("__class__")))'}, {'word': '__dir__', 'menu': 'LazyObject', 'kind': 'v', 'abbr': '__dir__ = new_method_proxy(dir)'}, {'word': '__dispatch', 'menu': 'lazy.__proxy__', 'kind': 'v', 'abbr': '__dispatch = None'}, {'word': '__eq__', 'menu': 'SimpleLazyObject', 'kind': 'v', 'abbr': '__eq__ = new_method_proxy(operator.eq)'}, {'word': '__getattr__', 'menu': 'LazyObject', 'kind': 'v', 'abbr': '__getattr__ = new_method_proxy(getattr)'}, {'word': '__hash__', 'menu': 'SimpleLazyObject', 'kind': 'v', 'abbr': '__hash__ = new_method_proxy(hash)'}, {'word': '__init__', 'menu': 'lazy.__proxy__', 'kind': 'm', 'abbr': 'def __init__(self, args, kw):'}, {'word': '__ne__', 'menu': 'SimpleLazyObject', 'kind': 'v', 'abbr': '__ne__ = new_method_proxy(operator.ne)'}, {'word': '__nonzero__', 'menu': 'SimpleLazyObject', 'kind': 'v', 'abbr': '__nonzero__'}, {'word': '__prepare_class__', 'menu': 'lazy.__proxy__', 'kind': 'v', 'abbr': '__prepare_class__ = classmethod(__prepare_class__)'}, {'word': '__promise__', 'menu': 'lazy.__proxy__', 'kind': 'v', 'abbr': '__promise__ = classmethod(__promise__)'}, {'word': '__proxy__', 'menu': '[I]', 'kind': 'c', 'abbr': '__proxy__(Promise): <class>'}, {'word': '_curried', 'menu': '[I]', 'kind': 'f', 'abbr': 'def _curried(*moreargs, **morekwargs):'}, {'word': '_lazy_proxy_unpickle', 'menu': '[I]', 'kind': 'f', 'abbr': 'def _lazy_proxy_unpickle(func, args, kwargs, *resultclasses):'}, {'word': '_setup', 'menu': 'LazyObject', 'kind': 'm', 'abbr': 'def _setup(self):'}, {'word': '_super', 'menu': '[I]', 'kind': 'v', 'abbr': '_super = super'}, {'word': '_wrapped', 'menu': 'LazyObject', 'kind': 'v', 'abbr': '_wrapped = None'}, {'word': 'allow_lazy', 'menu': '[I]', 'kind': 'f', 'abbr': 'def allow_lazy(func, *resultclasses):'}, {'word': 'cached_property', 'menu': '[I]', 'kind': 'c', 'abbr': 'cached_property(object): <class>'}, {'word': 'curry', 'menu': '[I]', 'kind': 'f', 'abbr': 'def curry(_curried_func, *args, **kwargs):'}, {'word': 'empty', 'menu': '[I]', 'kind': 'v', 'abbr': 'empty = object()'}, {'word': 'fdel', 'menu': '[I]', 'kind': 'f', 'abbr': 'def fdel(instance, name=fdel.__name__):'}, {'word': 'fget', 'menu': '[I]', 'kind': 'f', 'abbr': 'def fget(instance, instance_type=None, name=fget.__name__):'}, {'word': 'fset', 'menu': '[I]', 'kind': 'f', 'abbr': 'def fset(instance, value, name=fset.__name__):'}, {'word': 'inner', 'menu': '[I]', 'kind': 'f', 'abbr': 'def inner(self, *args):'}, {'word': 'lazy', 'menu': '[I]', 'kind': 'f', 'abbr': 'def lazy(func, *resultclasses):'}, {'word': 'lazy_property', 'menu': '[I]', 'kind': 'c', 'abbr': 'lazy_property(property): <class>'}, {'word': 'memoize', 'menu': '[I]', 'kind': 'f', 'abbr': 'def memoize(func, cache, num_args):'}, {'word': 'new_method_proxy', 'menu': '[I]', 'kind': 'f', 'abbr': 'def new_method_proxy(func):'}, {'word': 'partition', 'menu': '[I]', 'kind': 'f', 'abbr': 'def partition(predicate, values):'}, {'word': 'total_ordering', 'menu': '[I]', 'kind': 'f', 'abbr': 'def total_ordering(cls):'}, {'word': 'wrapper', 'menu': '[I]', 'kind': 'f', 'abbr': 'def wrapper(*args):'}]
